{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a merchant-volunteer assignment application built with React frontend and Express backend. The application allows volunteers to view available merchants, assign themselves to merchants, and track their assignments. It features a modern UI built with shadcn/ui components, Tailwind CSS, and includes integration with Google Sheets for merchant data management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state and React hooks for local state\n- **Build Tool**: Vite with TypeScript configuration\n\n## Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript with ES modules\n- **Data Layer**: Drizzle ORM for database operations\n- **Storage**: PostgreSQL database with in-memory fallback for development\n- **API Design**: RESTful endpoints for merchants, volunteers, and assignments\n\n## Database Schema\n- **Merchants Table**: Business information including name, category, address, contact details, status, and assignment tracking\n- **Volunteers Table**: Volunteer profiles with contact information and role management\n- **Relationships**: Simple assignment tracking through volunteer names in merchant records\n\n## Authentication & Authorization\n- No authentication system implemented - open access application\n- Role-based structure exists in volunteer schema but not enforced\n\n## Development & Build Pipeline\n- **Development**: Hot reload with Vite dev server\n- **Build**: TypeScript compilation with esbuild for production\n- **Database**: Drizzle migrations for schema management\n- **Deployment**: Production build creates static assets and bundled server","size_bytes":1961},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/AssignmentModal_1756418006530.jsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { googleSheetsService } from \"../utils/GoogleSheetsService\";\nimport { UserCheck, X } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div \n      onClick={onClose}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0,0,0,0.4)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000,\n        backdropFilter: 'blur(4px)',\n        padding: 'var(--gutter)'\n      }}\n    >\n      <motion.div\n        initial={{ y: 20, opacity: 0, scale: 0.95 }}\n        animate={{ y: 0, opacity: 1, scale: 1 }}\n        exit={{ y: 20, opacity: 0, scale: 0.95 }}\n        onClick={(e) => e.stopPropagation()}\n        className=\"card\"\n        style={{\n          width: '100%',\n          maxWidth: '480px',\n          maxHeight: '90vh',\n          overflowY: 'auto',\n          margin: 0,\n          position: 'relative'\n        }}\n      >\n        {children}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default function AssignmentModal({ \n  isOpen, \n  onClose, \n  merchant, \n  onAssign,\n  isAssigning \n}) {\n  const [volunteers, setVolunteers] = useState([]);\n  const [selectedVolunteer, setSelectedVolunteer] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadVolunteers();\n    }\n  }, [isOpen]);\n\n  const loadVolunteers = async () => {\n    setLoading(true);\n    try {\n      const data = await googleSheetsService.fetchVolunteers();\n      setVolunteers(data);\n    } catch (error) {\n      console.error(\"Error loading volunteers:\", error);\n    }\n    setLoading(false);\n  };\n\n  const handleAssign = () => {\n    if (selectedVolunteer && merchant) {\n      // Pass the entire merchant object and the selected volunteer's name\n      onAssign(merchant, selectedVolunteer);\n    }\n  };\n\n  if (!merchant) return null;\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <div style={{ position: 'relative' }}>\n        {/* Close button */}\n        <button\n          onClick={onClose}\n          style={{\n            position: 'absolute',\n            top: '-8px',\n            right: '-8px',\n            background: 'var(--bg-elev)',\n            border: '1px solid var(--divider)',\n            borderRadius: '50%',\n            width: '32px',\n            height: '32px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            boxShadow: 'var(--shadow-sm)'\n          }}\n        >\n          <X size={16} style={{ color: 'var(--muted)' }} />\n        </button>\n\n        <header style={{display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '1rem'}}>\n          <div style={{\n            width: '40px',\n            height: '40px',\n            background: 'var(--tint)',\n            borderRadius: 'var(--radius-md)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <UserCheck size={20} style={{ color: 'white' }} />\n          </div>\n          <div>\n            <h2 style={{ fontSize: '20px', fontWeight: 600, margin: 0, color: 'var(--text)' }}>\n              Assign Merchant\n            </h2>\n            <p style={{ color: 'var(--muted)', margin: 0, fontSize: 'var(--font-size-sm)' }}>\n              Select a volunteer for this merchant\n            </p>\n          </div>\n        </header>\n\n        {/* Merchant Info */}\n        <div className=\"card\" style={{ marginBottom: '1.5rem', padding: '16px', background: 'var(--bg)' }}>\n          <h3 style={{ fontWeight: 600, margin: '0 0 8px 0', color: 'var(--text)' }}>\n            {merchant.business_name}\n          </h3>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px', marginBottom: '8px' }}>\n            {merchant.category && <span className=\"badge\">{merchant.category}</span>}\n            {merchant.sub_category && <span className=\"badge\">{merchant.sub_category}</span>}\n          </div>\n          {merchant.address && (\n            <p style={{ color: 'var(--muted)', fontSize: 'var(--font-size-sm)', margin: 0 }}>\n              {merchant.address}\n            </p>\n          )}\n        </div>\n        \n        <div style={{ marginBottom: '1.5rem'}}>\n          <label style={{ \n            fontSize: 'var(--font-size-sm)', \n            color: 'var(--muted)', \n            display: 'block', \n            marginBottom: '8px',\n            fontWeight: 600\n          }}>\n            Select Volunteer\n          </label>\n          <select \n            className=\"input\"\n            value={selectedVolunteer} \n            onChange={(e) => setSelectedVolunteer(e.target.value)}\n            disabled={loading || isAssigning}\n            style={{ width: '100%' }}\n          >\n            <option value=\"\" disabled>\n              {loading ? \"Loading volunteers...\" : \"Choose a volunteer\"}\n            </option>\n            {volunteers.map((volunteer) => (\n              <option key={volunteer.id} value={volunteer.full_name}>\n                {volunteer.full_name}\n              </option>\n            ))}\n          </select>\n          <p style={{ \n            fontSize: 'var(--font-size-xs)', \n            color: 'var(--muted)', \n            margin: '4px 0 0 0' \n          }}>\n            Note: Each volunteer can only have up to 3 merchants assigned.\n          </p>\n        </div>\n        \n        <footer style={{ \n          display: 'flex', \n          justifyContent: 'flex-end', \n          gap: '12px', \n          paddingTop: '1.5rem', \n          borderTop: '1px solid var(--divider)' \n        }}>\n          <button \n            className=\"btn\" \n            onClick={onClose} \n            disabled={isAssigning}\n          >\n            Cancel\n          </button>\n          <button \n            onClick={handleAssign}\n            disabled={!selectedVolunteer || isAssigning}\n            className=\"btn primary\"\n          >\n            {isAssigning ? \"Assigning...\" : \"Assign Merchant\"}\n          </button>\n        </footer>\n      </div>\n    </Modal>\n  );\n}\n\n","size_bytes":6231},"attached_assets/GoogleSheetsService_1756417998763.js":{"content":"\nexport class GoogleSheetsService {\n  constructor() {\n    this.SHEET_ID = '1KCizb55EhOFAqmN-7SlBaUp0qHNJRZwFWhvG_ITno0w';\n    this.API_KEY = 'AIzaSyBBJEfU6h_PQfVN4_H2eAo5spS0ZP6rsmc';\n    this.MERCHANTS_RANGE = 'Sheet1!A:L'; // Merchant info in columns A to L\n    this.VOLUNTEERS_RANGE = 'Sheet1!L:L'; // People list is in column L\n    this.APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycby43gvbpZK9-5jRyrV1z1XJ4KG_MudXk0ry1IM158WrBPcF4WAfJjJNvTwpFB8DR_wV/exec';\n    this.cache = new Map();\n    this.cacheExpiry = 30000; // 30 seconds cache\n  }\n\n  async fetchMerchants(useCache = true) {\n    const cacheKey = 'merchants';\n    const now = Date.now();\n    \n    if (useCache && this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (now - cached.timestamp < this.cacheExpiry) {\n        return cached.data;\n      }\n    }\n\n    try {\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${this.SHEET_ID}/values/${this.MERCHANTS_RANGE}?key=${this.API_KEY}`;\n      console.log('Fetching merchants from URL:', url);\n      \n      const response = await fetch(url);\n      const responseData = await response.json();\n      \n      console.log('Merchants response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`Google Sheets API error: ${responseData.error?.message || 'Unknown error'}`);\n      }\n      \n      if (!responseData.values || responseData.values.length === 0) {\n        throw new Error('No merchant data found in range A:L. Please check if the sheet contains data in these columns.');\n      }\n\n      console.log('Merchant data found:', responseData.values.length, 'rows');\n      console.log('First row (headers):', responseData.values[0]);\n      \n      const merchants = responseData.values.slice(1).map((row, index) => {\n        const merchant = {\n          id: `merchant_${index}`,\n          business_name: row[0] || '',   // Column A\n          category: row[1] || '',        // Column B\n          sub_category: row[2] || '',    // Column C\n          address: row[3] || '',         // Column D\n          contact_person: row[4] || '',   // Column E\n          phone: row[5] || '',           // Column F\n          email: row[6] || '',           // Column G\n          status: row[7] || 'active',    // Column H\n          // Columns I, J, K are skipped as per UI requirements\n          assigned_to: row[11] || '',      // Column L (Cast Who Sold Ad)\n          row_index: index + 2 \n        };\n        return merchant;\n      }).filter(m => m.business_name.trim() !== '');\n\n      console.log('Processed merchants:', merchants.length);\n      \n      this.cache.set(cacheKey, { data: merchants, timestamp: now });\n      return merchants;\n    } catch (error) {\n      console.error('Error fetching merchants from Google Sheets:', error);\n      throw error;\n    }\n  }\n\n  async fetchVolunteers() {\n    try {\n      // Use VOLUNTEERS_RANGE which points to column L\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${this.SHEET_ID}/values/${this.VOLUNTEERS_RANGE}?key=${this.API_KEY}`;\n      console.log('Fetching volunteers from URL:', url);\n      \n      const response = await fetch(url);\n      const responseData = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(`Google Sheets API error: ${responseData.error?.message || 'Unknown error'}`);\n      }\n      \n      if (!responseData.values || responseData.values.length === 0) {\n        throw new Error('No volunteer data found in column L.');\n      }\n      \n      // Extract unique, non-empty names from column L\n      const volunteerNames = [...new Set(responseData.values\n        .slice(1) // Skip header row\n        .map(row => row[0]) \n        .filter(name => name && name.trim() !== ''))];\n      \n      return volunteerNames.map((name, index) => ({\n        id: `volunteer_${index}`,\n        full_name: name,\n        active: true\n      }));\n    } catch (error) {\n      console.error('Error fetching volunteers from Google Sheets:', error);\n      // As a fallback, return an empty array to prevent crashes\n      return [];\n    }\n  }\n\n  async updateMerchantAssignment(merchantName, volunteerName) {\n    try {\n      // Client-side check for 3-assignment limit to prevent unnecessary API calls\n      const merchants = await this.fetchMerchants(false);\n      const currentAssignments = merchants.filter(m => m.assigned_to === volunteerName).length;\n      if (currentAssignments >= 3) {\n        throw new Error(`${volunteerName} already has 3 assignments. Maximum limit reached.`);\n      }\n\n      // Call the Apps Script endpoint\n      const response = await fetch(this.APPS_SCRIPT_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ merchantName, volunteerName })\n      });\n\n      const data = await response.json();\n\n      if (data.status === \"success\") {\n        console.log(`✅ ${data.message}`);\n        // Clear cache to force UI refresh\n        this.cache.clear();\n        return true;\n      } else {\n        // Throw an error with the message from the Apps Script\n        throw new Error(data.message || \"An unknown error occurred during assignment.\");\n      }\n    } catch (err) {\n      console.error(\"Assignment error:\", err);\n      // Re-throw the error so it can be caught by the UI\n      throw err;\n    }\n  }\n\n  getBusinessIcon(category, subCategory) {\n    const iconMap = {\n      'restaurant': '🍽️',\n      'food': '🍔',\n      'pizza': '🍕',\n      'coffee': '☕',\n      'bakery': '🥖',\n      'grocery': '🛒',\n      'fitness': '💪',\n      'gym': '🏋️',\n      'health': '🏥',\n      'beauty': '💄',\n      'salon': '✂️',\n      'retail': '🛍️',\n      'clothing': '👔',\n      'automotive': '🚗',\n      'real estate': '🏠',\n      'finance': '💰',\n      'technology': '💻',\n      'education': '📚',\n      'entertainment': '🎬',\n      'services': '⚙️',\n      'default': '🏢'\n    };\n\n    const key = (category + ' ' + (subCategory || '')).toLowerCase();\n    \n    for (const [keyword, icon] of Object.entries(iconMap)) {\n      if (key.includes(keyword)) {\n        return icon;\n      }\n    }\n    \n    return iconMap.default;\n  }\n}\n\nexport const googleSheetsService = new GoogleSheetsService();\n\n","size_bytes":6289},"attached_assets/MerchantCard_1756418006530.jsx":{"content":"import React from \"react\";\nimport { Building2, MapPin, User, CheckCircle, Phone, Mail } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function MerchantCard({ merchant, onSelect, isSelectable, businessIcon = '🏢' }) {\n  return (\n    <motion.div\n      className=\"card\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      style={{ \n        display: 'flex', \n        flexDirection: 'column', \n        height: '100%',\n        minHeight: '280px',\n        maxWidth: '100%',\n        overflow: 'hidden'\n      }}\n    >\n      <div style={{ flexGrow: 1 }}>\n        <div style={{ \n          display: 'flex', \n          alignItems: 'flex-start', \n          justifyContent: 'space-between', \n          gap: '12px', \n          marginBottom: '1rem'\n        }}>\n          <div style={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: '12px', \n            minWidth: 0,\n            flex: '1 1 auto'\n          }}>\n            <div style={{ \n              width: '48px', \n              height: '48px', \n              background: 'var(--bg)', \n              border: '1px solid var(--divider)', \n              borderRadius: 'var(--radius-md)', \n              display: 'grid', \n              placeItems: 'center', \n              flexShrink: 0,\n              fontSize: '20px'\n            }}>\n              {businessIcon}\n            </div>\n            <div style={{ minWidth: 0, flex: 1 }}>\n              <h3 style={{ \n                fontWeight: 600, \n                fontSize: 'clamp(16px, 4vw, 18px)', \n                lineHeight: 1.3,\n                margin: 0,\n                wordBreak: 'break-word',\n                color: 'var(--text)'\n              }}>\n                {merchant.business_name}\n              </h3>\n              <div style={{ \n                display: 'flex', \n                flexWrap: 'wrap', \n                gap: '4px', \n                marginTop: '6px' \n              }}>\n                {merchant.category && (\n                  <span className=\"badge\" style={{ fontSize: '10px' }}>\n                    {merchant.category}\n                  </span>\n                )}\n                {merchant.sub_category && (\n                  <span className=\"badge\" style={{ fontSize: '10px' }}>\n                    {merchant.sub_category}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <div style={{ flexShrink: 0 }}>\n            {merchant.assigned_to ? (\n              <span className=\"badge assigned\" style={{ fontSize: '10px' }}>\n                <CheckCircle size={12} />\n                Assigned\n              </span>\n            ) : (\n              <span className=\"badge available\" style={{ fontSize: '10px' }}>\n                <User size={12} />\n                Available\n              </span>\n            )}\n          </div>\n        </div>\n        \n        {/* Address */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'flex-start', \n          gap: '8px',\n          marginBottom: '0.75rem'\n        }}>\n          <MapPin size={14} style={{ \n            color: 'var(--muted)', \n            marginTop: '2px', \n            flexShrink: 0 \n          }} />\n          <p style={{ \n            fontSize: 'clamp(12px, 3vw, 14px)', \n            color: 'var(--muted)', \n            margin: 0, \n            lineHeight: 1.4,\n            wordBreak: 'break-word'\n          }}>\n            {merchant.address || 'No address provided'}\n          </p>\n        </div>\n\n        {/* Phone */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '8px',\n          marginBottom: '0.5rem'\n        }}>\n          <Phone size={14} style={{ \n            color: 'var(--muted)', \n            flexShrink: 0 \n          }} />\n          {merchant.phone ? (\n            <a \n              href={`tel:${merchant.phone}`}\n              style={{ \n                fontSize: 'clamp(12px, 3vw, 14px)', \n                color: 'var(--tint)', \n                textDecoration: 'none',\n                wordBreak: 'break-word'\n              }}\n            >\n              {merchant.phone}\n            </a>\n          ) : (\n            <p style={{ fontSize: 'clamp(12px, 3vw, 14px)', color: 'var(--muted)', margin: 0 }}>\n              No phone\n            </p>\n          )}\n        </div>\n\n        {/* Email */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          gap: '8px',\n          marginBottom: '1rem'\n        }}>\n          <Mail size={14} style={{ \n            color: 'var(--muted)', \n            flexShrink: 0 \n          }} />\n          {merchant.email ? (\n            <a \n              href={`mailto:${merchant.email}`}\n              style={{ \n                fontSize: 'clamp(12px, 3vw, 14px)', \n                color: 'var(--tint)', \n                textDecoration: 'none',\n                wordBreak: 'break-all'\n              }}\n            >\n              {merchant.email}\n            </a>\n          ) : (\n            <p style={{ fontSize: 'clamp(12px, 3vw, 14px)', color: 'var(--muted)', margin: 0 }}>\n              No email\n            </p>\n          )}\n        </div>\n      </div>\n      \n      <div style={{ marginTop: 'auto', paddingTop: '1rem' }}>\n        {merchant.assigned_to ? (\n          <div style={{ \n            paddingTop: '1rem', \n            borderTop: '1px solid var(--divider)' \n          }}>\n            <p style={{\n              fontSize: 'clamp(12px, 3vw, 14px)', \n              margin: 0,\n              wordBreak: 'break-word'\n            }}>\n              <span style={{color: 'var(--muted)'}}>Assigned to: </span>\n              <span style={{fontWeight: 600, color: 'var(--success)'}}>\n                {merchant.assigned_to}\n              </span>\n            </p>\n          </div>\n        ) : isSelectable ? (\n          <button \n            onClick={() => onSelect(merchant)}\n            className=\"btn primary\"\n            style={{ \n              width: '100%',\n              fontSize: 'clamp(12px, 3vw, 14px)',\n              padding: '12px 16px'\n            }}\n          >\n            Select This Merchant\n          </button>\n        ) : null}\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":6295},"attached_assets/MerchantSelection_1756417990551.jsx":{"content":"import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Building2, Search as SearchIcon, Users, CheckCircle, X, Loader } from \"lucide-react\";\nimport { googleSheetsService } from \"../Components/utils/GoogleSheetsService\";\n\nimport SearchFilters from \"../Components/merchants/SearchFilters\";\nimport MerchantCard from \"../Components/merchants/MerchantCard\";\nimport AssignmentModal from \"../Components/merchants/AssignmentModal\";\n\nconst ITEMS_PER_PAGE = 30;\nconst PERFORMANCE_TRACKER = {\n  loadStart: 0,\n  loadEnd: 0,\n  searchStart: 0,\n  searchEnd: 0,\n  renderStart: 0,\n  renderEnd: 0\n};\n\nexport default function MerchantSelection() {\n  const [merchants, setMerchants] = useState([]);\n  const [displayedMerchants, setDisplayedMerchants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchText, setSearchText] = useState(\"\");\n  const [assignmentFilter, setAssignmentFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [subCategoryFilter, setSubCategoryFilter] = useState(\"all\");\n  const [selectedMerchant, setSelectedMerchant] = useState(null);\n  const [isAssigning, setIsAssigning] = useState(false);\n  const [error, setError] = useState(null);\n  const [assignmentError, setAssignmentError] = useState(null);\n  const [performanceStats, setPerformanceStats] = useState(null);\n  const [showPerformanceStats, setShowPerformanceStats] = useState(false);\n\n  const loadMerchants = useCallback(async () => {\n    if (document.hidden) return;\n    try {\n      const data = await googleSheetsService.fetchMerchants();\n      console.log('Loaded merchants:', data.length);\n      setMerchants(data);\n      setError(null);\n    } catch (error) {\n      const errorMsg = \"Failed to load merchants from Google Sheets. Please check your internet connection and try again.\";\n      setError(errorMsg);\n      console.error(\"Error loading merchants:\", error);\n    }\n  }, []);\n\n  const filteredMerchants = useMemo(() => {\n    PERFORMANCE_TRACKER.searchStart = Date.now();\n    let filtered = merchants;\n\n    if (assignmentFilter === \"assigned\") {\n      filtered = filtered.filter(m => m.assigned_to);\n    } else if (assignmentFilter === \"unassigned\") {\n      filtered = filtered.filter(m => !m.assigned_to);\n    }\n\n    if (categoryFilter !== \"all\") {\n      filtered = filtered.filter(m => m.category === categoryFilter);\n    }\n\n    if (subCategoryFilter !== \"all\") {\n      filtered = filtered.filter(m => m.sub_category === subCategoryFilter);\n    }\n\n    if (searchText.trim()) {\n      const searchTerm = searchText.toLowerCase().trim();\n      filtered = filtered.filter(merchant => {\n        return (\n          merchant.business_name?.toLowerCase().includes(searchTerm) ||\n          merchant.category?.toLowerCase().includes(searchTerm) ||\n          merchant.sub_category?.toLowerCase().includes(searchTerm) ||\n          merchant.address?.toLowerCase().includes(searchTerm) ||\n          merchant.contact_person?.toLowerCase().includes(searchTerm)\n        );\n      });\n    }\n\n    PERFORMANCE_TRACKER.searchEnd = Date.now();\n    return filtered;\n  }, [merchants, assignmentFilter, categoryFilter, subCategoryFilter, searchText]);\n\n  const updatePerformanceStats = useCallback(() => {\n    const isMobile = window.innerWidth < 768;\n    setPerformanceStats({\n      loadTime: PERFORMANCE_TRACKER.loadEnd - PERFORMANCE_TRACKER.loadStart,\n      searchTime: PERFORMANCE_TRACKER.searchEnd - PERFORMANCE_TRACKER.searchStart,\n      renderTime: PERFORMANCE_TRACKER.renderEnd - PERFORMANCE_TRACKER.renderStart,\n      totalMerchants: merchants.length,\n      filteredCount: filteredMerchants.length,\n      displayedCount: displayedMerchants.length,\n      deviceType: isMobile ? 'Mobile' : 'Desktop',\n      memoryUsage: 'performance' in window && 'memory' in window.performance ? `${Math.round(window.performance.memory.usedJSHeapSize / 1024 / 1024)}MB` : 'N/A'\n    });\n  }, [merchants.length, filteredMerchants.length, displayedMerchants.length]);\n\n  useEffect(() => {\n    const initialLoad = async () => {\n      PERFORMANCE_TRACKER.loadStart = Date.now();\n      setLoading(true);\n      await loadMerchants();\n      PERFORMANCE_TRACKER.loadEnd = Date.now();\n      setLoading(false);\n      updatePerformanceStats();\n    };\n    initialLoad();\n\n    const intervalId = setInterval(loadMerchants, 10000);\n    return () => clearInterval(intervalId);\n  }, [loadMerchants, updatePerformanceStats]);\n\n  const categories = useMemo(() => {\n    const uniqueCategories = [...new Set(merchants.map(m => m.category).filter(Boolean))];\n    return uniqueCategories.sort();\n  }, [merchants]);\n\n  const subCategories = useMemo(() => {\n    let filteredSubs = merchants;\n    if (categoryFilter !== 'all') {\n      filteredSubs = merchants.filter(m => m.category === categoryFilter);\n    }\n    const uniqueSubCategories = [...new Set(filteredSubs.map(m => m.sub_category).filter(Boolean))];\n    return uniqueSubCategories.sort();\n  }, [merchants, categoryFilter]);\n  \n  // Pagination logic\n  useEffect(() => {\n    PERFORMANCE_TRACKER.renderStart = Date.now();\n    const startIndex = 0;\n    const endIndex = currentPage * ITEMS_PER_PAGE;\n    setDisplayedMerchants(filteredMerchants.slice(startIndex, endIndex));\n    PERFORMANCE_TRACKER.renderEnd = Date.now();\n    updatePerformanceStats();\n  }, [filteredMerchants, currentPage, updatePerformanceStats]);\n\n  // Reset pagination when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchText, assignmentFilter, categoryFilter, subCategoryFilter]);\n\n  const handleLoadMore = useCallback(() => {\n    setLoadingMore(true);\n    setTimeout(() => {\n      setCurrentPage(prev => prev + 1);\n      setLoadingMore(false);\n    }, 300);\n  }, []);\n\n  const handleAssignMerchant = async (merchant, volunteerName) => {\n    setIsAssigning(true);\n    setAssignmentError(null);\n    try {\n      // Pass the business name instead of the ID\n      await googleSheetsService.updateMerchantAssignment(merchant.business_name, volunteerName);\n      await loadMerchants(); // This will fetch fresh data\n      setSelectedMerchant(null);\n    } catch (error) {\n      console.error(\"Error assigning merchant:\", error);\n      setAssignmentError(error.message || \"Failed to assign merchant. Please try again.\");\n    } finally {\n      setIsAssigning(false);\n    }\n  };\n\n  const hasMoreItems = displayedMerchants.length < filteredMerchants.length;\n\n  return (\n    <div style={{ padding: 'var(--gutter)', maxWidth: 'var(--max-w)', margin: '0 auto' }}>\n      <header style={{ marginBottom: 'var(--gutter)', textAlign: 'center' }}>\n        <h1 style={{ fontSize: 'var(--font-size-2xl)', color: 'var(--text)', marginBottom: '0.5rem' }}>\n          Merchant Sponsorship Portal\n        </h1>\n        <p style={{ fontSize: 'var(--font-size-lg)', color: 'var(--muted)', maxWidth: '60ch', margin: '0 auto' }}>\n          Browse and assign merchants for ad sponsorships in the Ridgewood Jamboree program.\n        </p>\n        \n        {/* Performance Toggle - Always available but hidden by default */}\n        <button \n          onClick={() => setShowPerformanceStats(!showPerformanceStats)}\n          className=\"btn link\"\n          style={{ fontSize: 'var(--font-size-xs)', marginTop: '0.5rem' }}\n        >\n          {showPerformanceStats ? 'Hide' : 'Show'} Performance Stats\n        </button>\n      </header>\n\n      {/* Performance Stats */}\n      {showPerformanceStats && performanceStats && (\n        <div className=\"card\" style={{ marginBottom: 'var(--gutter)', fontSize: 'var(--font-size-xs)' }}>\n          <h4>Performance Report</h4>\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '8px' }}>\n            <div>Load Time: {performanceStats.loadTime}ms</div>\n            <div>Search Time: {performanceStats.searchTime}ms</div>\n            <div>Render Time: {performanceStats.renderTime}ms</div>\n            <div>Device: {performanceStats.deviceType}</div>\n            <div>Memory: {performanceStats.memoryUsage}</div>\n            <div>Total/Filtered/Shown: {performanceStats.totalMerchants}/{performanceStats.filteredCount}/{performanceStats.displayedCount}</div>\n          </div>\n        </div>\n      )}\n\n      {assignmentError && (\n        <div className=\"card\" style={{\n          borderColor: 'var(--danger)',\n          background: 'rgba(255,59,48,0.05)',\n          marginBottom: 'var(--gutter)',\n          textAlign: 'center'\n        }}>\n          <h4 style={{ color: 'var(--danger)', fontSize: 'var(--font-size-md)' }}>Assignment Failed</h4>\n          <p style={{ color: 'var(--danger)', margin: 0, fontSize: 'var(--font-size-sm)' }}>\n            {assignmentError}\n          </p>\n        </div>\n      )}\n\n      <SearchFilters\n        searchText={searchText}\n        setSearchText={setSearchText}\n        assignmentFilter={assignmentFilter}\n        setAssignmentFilter={setAssignmentFilter}\n        categoryFilter={categoryFilter}\n        setCategoryFilter={setCategoryFilter}\n        categories={categories}\n        subCategoryFilter={subCategoryFilter}\n        setSubCategoryFilter={setSubCategoryFilter}\n        subCategories={subCategories}\n      />\n\n      {error && (\n        <div className=\"card\" style={{\n          borderColor: 'var(--danger)',\n          background: 'rgba(255,59,48,0.05)',\n          margin: 'var(--gutter) 0',\n          textAlign: 'center'\n        }}>\n          <p style={{ color: 'var(--danger)', margin: 0, fontSize: 'var(--font-size-sm)' }}>\n            {error}\n          </p>\n          <p style={{ color: 'var(--muted)', margin: '8px 0 0 0', fontSize: 'var(--font-size-xs)' }}>\n            Check the console for more details. The Google Sheet may need to be made publicly viewable.\n          </p>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"grid grid-3\">\n          {Array(6).fill(0).map((_, i) => (\n            <div key={i} className=\"card\" style={{ opacity: 0.5, minHeight: '280px' }}>\n              <div style={{\n                height: '40px',\n                background: 'var(--bg)',\n                borderRadius: 'var(--radius-md)',\n                marginBottom: '1rem'\n              }}></div>\n              <div style={{\n                height: '20px',\n                background: 'var(--bg)',\n                borderRadius: 'var(--radius-sm)'\n              }}></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <>\n          <div style={{ margin: 'var(--gutter) 0 1rem 0', textAlign: 'center' }}>\n            <p style={{ color: 'var(--muted)', fontSize: 'var(--font-size-sm)' }}>\n              Showing <strong style={{color: 'var(--text)'}}>{displayedMerchants.length}</strong> of <strong style={{color: 'var(--text)'}}>{filteredMerchants.length}</strong> merchants\n              {filteredMerchants.length !== merchants.length && ` (${merchants.length} total)`}\n            </p>\n          </div>\n\n          <AnimatePresence>\n            {displayedMerchants.length > 0 ? (\n              <div className=\"grid grid-3\">\n                {displayedMerchants.map((merchant) => (\n                  <MerchantCard\n                    key={merchant.id}\n                    merchant={merchant}\n                    onSelect={setSelectedMerchant}\n                    isSelectable={!merchant.assigned_to}\n                    businessIcon={googleSheetsService.getBusinessIcon(merchant.category, merchant.sub_category)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                style={{ textAlign: 'center', padding: '60px 20px' }}\n              >\n                <SearchIcon style={{ \n                  width: '48px', \n                  height: '48px', \n                  color: 'var(--divider)', \n                  margin: '0 auto 1rem' \n                }} />\n                <h3 style={{fontSize: '20px'}}>No merchants found</h3>\n                <p style={{ color: 'var(--muted)', maxWidth: '40ch', margin: '0 auto', fontSize: 'var(--font-size-sm)' }}>\n                  {merchants.length === 0 && error ? \n                    \"Unable to load merchants from Google Sheets. Please check the console for details.\" : \n                    \"Try adjusting your search criteria or filters.\"\n                  }\n                </p>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {hasMoreItems && (\n            <div style={{ textAlign: 'center', marginTop: 'var(--gutter)' }}>\n              <button \n                onClick={handleLoadMore}\n                disabled={loadingMore}\n                className=\"btn primary\"\n                style={{ padding: '12px 24px' }}\n              >\n                {loadingMore ? (\n                  <>\n                    <Loader size={16} style={{ marginRight: '8px', animation: 'spin 1s linear infinite' }} />\n                    Loading...\n                  </>\n                ) : (\n                  `Load More (${filteredMerchants.length - displayedMerchants.length} remaining)`\n                )}\n              </button>\n            </div>\n          )}\n        </>\n      )}\n\n      <AssignmentModal\n        isOpen={!!selectedMerchant}\n        onClose={() => setSelectedMerchant(null)}\n        merchant={selectedMerchant}\n        onAssign={handleAssignMerchant}\n        isAssigning={isAssigning}\n      />\n\n      <style>\n        {`\n          @keyframes spin {\n            from { transform: rotate(0deg); }\n            to { transform: rotate(360deg); }\n          }\n        `}\n      </style>\n    </div>\n  );\n}\n","size_bytes":13798},"attached_assets/MyAssignments_1756417990550.jsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { googleSheetsService } from \"../Components/utils/GoogleSheetsService\";\nimport { motion } from \"framer-motion\";\nimport { UserCheck, Search, Phone, Mail, MapPin, ChevronDown } from \"lucide-react\";\n\nexport default function MyAssignments() {\n  const [assignments, setAssignments] = useState([]);\n  const [volunteers, setVolunteers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [volunteerName, setVolunteerName] = useState(\"\");\n  const [searchPerformed, setSearchPerformed] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [filteredVolunteers, setFilteredVolunteers] = useState([]);\n\n  useEffect(() => {\n    loadVolunteers();\n  }, []);\n\n  useEffect(() => {\n    if (volunteerName.trim() && volunteers.length > 0) {\n      const filtered = volunteers.filter(v => \n        v.full_name.toLowerCase().includes(volunteerName.toLowerCase())\n      ).slice(0, 5); // Limit to 5 suggestions\n      setFilteredVolunteers(filtered);\n      setShowSuggestions(filtered.length > 0 && volunteerName !== filtered[0]?.full_name);\n    } else {\n      setFilteredVolunteers([]);\n      setShowSuggestions(false);\n    }\n  }, [volunteerName, volunteers]);\n\n  const loadVolunteers = async () => {\n    try {\n      const data = await googleSheetsService.fetchVolunteers();\n      setVolunteers(data);\n    } catch (error) {\n      console.error(\"Error loading volunteers:\", error);\n    }\n  };\n\n  const searchAssignments = async (nameToSearch = null) => {\n    const searchName = nameToSearch || volunteerName.trim();\n    if (!searchName) return;\n    \n    setLoading(true);\n    setSearchPerformed(true);\n    setShowSuggestions(false);\n    try {\n      const allMerchants = await googleSheetsService.fetchMerchants();\n      const userAssignments = allMerchants.filter(m => m.assigned_to === searchName);\n      setAssignments(userAssignments);\n    } catch (error) {\n      console.error(\"Error loading assignments:\", error);\n      setAssignments([]);\n    }\n    setLoading(false);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      searchAssignments();\n    } else if (e.key === 'ArrowDown' && filteredVolunteers.length > 0) {\n      e.preventDefault();\n      // Focus first suggestion\n      const firstSuggestion = document.querySelector('.suggestion-item');\n      if (firstSuggestion) firstSuggestion.focus();\n    }\n  };\n\n  const handleSuggestionClick = (name) => {\n    setVolunteerName(name);\n    setShowSuggestions(false);\n    // Immediately search with the selected name\n    searchAssignments(name);\n  };\n\n  const handleInputFocus = () => {\n    if (filteredVolunteers.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleInputBlur = () => {\n    // Delay hiding suggestions to allow clicks\n    setTimeout(() => setShowSuggestions(false), 200);\n  };\n\n  return (\n    <div>\n       <header style={{ marginBottom: 'var(--gutter)', textAlign: 'center' }}>\n        <div style={{width: '60px', height: '60px', background: 'var(--tint)', borderRadius: 'var(--radius-lg)', display: 'grid', placeItems: 'center', margin: '0 auto 1rem'}}>\n            <UserCheck size={32} style={{ color: 'white' }} />\n        </div>\n        <h1 style={{fontSize: 'var(--font-size-2xl)', color: 'var(--text)'}}>My Assigned Merchants</h1>\n        <p style={{fontSize: 'var(--font-size-lg)', color: 'var(--muted)', maxWidth: '60ch', margin: '0 auto' }}>\n          View all merchants assigned to you for ad sponsorship outreach.\n        </p>\n      </header>\n\n      <div className=\"card\" style={{ maxWidth: '720px', margin: '0 auto var(--gutter) auto', position: 'relative' }}>\n        <label style={{ fontSize: 'var(--font-size-sm)', color: 'var(--muted)', display: 'block', marginBottom: '8px' }}>\n          Enter Your Full Name\n        </label>\n        <div style={{ display: 'flex', gap: '1rem', position: 'relative' }}>\n          <div style={{ flex: 1, position: 'relative' }}>\n            <input\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Type your full name...\"\n              value={volunteerName}\n              onChange={(e) => setVolunteerName(e.target.value)}\n              onKeyPress={handleKeyPress}\n              onFocus={handleInputFocus}\n              onBlur={handleInputBlur}\n              autoComplete=\"off\"\n            />\n            \n            {showSuggestions && (\n              <div style={{\n                position: 'absolute',\n                top: '100%',\n                left: 0,\n                right: 0,\n                background: 'var(--bg-elev)',\n                border: '1px solid var(--divider)',\n                borderRadius: 'var(--radius-md)',\n                boxShadow: 'var(--shadow-sm)',\n                zIndex: 1000,\n                maxHeight: '200px',\n                overflowY: 'auto'\n              }}>\n                {filteredVolunteers.map((volunteer, index) => (\n                  <button\n                    key={volunteer.id}\n                    className=\"suggestion-item\"\n                    onClick={() => handleSuggestionClick(volunteer.full_name)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        handleSuggestionClick(volunteer.full_name);\n                      } else if (e.key === 'ArrowDown') {\n                        e.preventDefault();\n                        const next = e.target.nextElementSibling;\n                        if (next) next.focus();\n                      } else if (e.key === 'ArrowUp') {\n                        e.preventDefault();\n                        const prev = e.target.previousElementSibling;\n                        if (prev) prev.focus();\n                        else document.querySelector('input').focus();\n                      }\n                    }}\n                    style={{\n                      width: '100%',\n                      padding: '12px 16px',\n                      border: 'none',\n                      background: 'transparent',\n                      textAlign: 'left',\n                      cursor: 'pointer',\n                      fontSize: 'var(--font-size-md)',\n                      color: 'var(--text)',\n                      borderBottom: index < filteredVolunteers.length - 1 ? '1px solid var(--divider)' : 'none',\n                      transition: 'background var(--dur-fast) var(--ease)'\n                    }}\n                    onMouseEnter={(e) => e.target.style.background = 'var(--bg)'}\n                    onMouseLeave={(e) => e.target.style.background = 'transparent'}\n                  >\n                    {volunteer.full_name}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <button \n            onClick={() => searchAssignments()}\n            disabled={!volunteerName.trim() || loading}\n            className=\"btn primary\"\n            style={{ flexShrink: 0 }}\n          >\n            {loading ? \"Searching...\" : \"Find\"}\n          </button>\n        </div>\n        <p style={{ fontSize: 'var(--font-size-xs)', color: 'var(--muted)', marginTop: '8px', marginBottom: 0 }}>\n          * Enter your name exactly as it was used during assignment. Maximum 3 assignments per volunteer.\n        </p>\n      </div>\n\n      <div>\n          {loading && searchPerformed && (\n            <div style={{ textAlign: 'center', padding: '40px 0' }}>\n               <p style={{ color: 'var(--muted)'}}>Searching for your assignments...</p>\n            </div>\n          )}\n\n          {!loading && searchPerformed && assignments.length === 0 && (\n             <div className=\"card\" style={{borderColor: 'var(--warning)', background: 'rgba(255,159,10,0.05)', textAlign: 'center', maxWidth: '600px', margin: '0 auto'}}>\n                <h4 style={{color: 'var(--warning)'}}>No Assignments Found</h4>\n                <p style={{color: 'var(--muted)', margin: 0}}>No assignments found for \"{volunteerName}\". Please check the spelling and try again.</p>\n            </div>\n          )}\n\n          {!loading && assignments.length > 0 && (\n            <>\n              <div style={{ textAlign: 'center', marginBottom: 'var(--gutter)' }}>\n                <h2 style={{fontSize: 'var(--font-size-xl)', color: 'var(--text)'}}>\n                  Your Assignments ({assignments.length}/3)\n                </h2>\n                <p style={{color: 'var(--muted)'}}>\n                  Assigned to: <span style={{fontWeight: 600, color: 'var(--text)'}}>{volunteerName}</span>\n                </p>\n              </div>\n\n              <div className=\"grid grid-3\">\n                {assignments.map((merchant, index) => (\n                  <motion.div\n                    key={merchant.id}\n                    className=\"card\"\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                    style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                  >\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '1rem' }}>\n                      <div style={{ \n                        width: '40px', \n                        height: '40px', \n                        background: 'var(--bg)', \n                        borderRadius: 'var(--radius-md)', \n                        display: 'flex', \n                        alignItems: 'center', \n                        justifyContent: 'center',\n                        fontSize: '18px'\n                      }}>\n                        {googleSheetsService.getBusinessIcon(merchant.category, merchant.sub_category)}\n                      </div>\n                      <div style={{ flex: 1 }}>\n                        <h3 style={{fontWeight: 600, fontSize: '18px', color: 'var(--text)', margin: 0}}>\n                          {merchant.business_name}\n                        </h3>\n                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '4px', marginTop: '4px' }}>\n                          {merchant.category && <span className=\"badge\" style={{ fontSize: '10px' }}>{merchant.category}</span>}\n                          {merchant.sub_category && <span className=\"badge\" style={{ fontSize: '10px' }}>{merchant.sub_category}</span>}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n                      {merchant.address && (\n                        <div style={{ display: 'flex', alignItems: 'flex-start', gap: '8px' }}>\n                          <MapPin size={16} style={{ color: 'var(--muted)', marginTop: '2px', flexShrink: 0 }} />\n                          <span style={{ fontSize: 'var(--font-size-sm)', color: 'var(--muted)', lineHeight: 1.4 }}>\n                            {merchant.address}\n                          </span>\n                        </div>\n                      )}\n\n                      {merchant.phone && (\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                          <Phone size={16} style={{ color: 'var(--muted)', flexShrink: 0 }} />\n                          <a href={`tel:${merchant.phone}`} style={{ \n                            fontSize: 'var(--font-size-sm)', \n                            color: 'var(--tint)', \n                            textDecoration: 'none' \n                          }}>\n                            {merchant.phone}\n                          </a>\n                        </div>\n                      )}\n\n                      {merchant.email && (\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                          <Mail size={16} style={{ color: 'var(--muted)', flexShrink: 0 }} />\n                          <a href={`mailto:${merchant.email}`} style={{ \n                            fontSize: 'var(--font-size-sm)', \n                            color: 'var(--tint)', \n                            textDecoration: 'none',\n                            wordBreak: 'break-all'\n                          }}>\n                            {merchant.email}\n                          </a>\n                        </div>\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </>\n          )}\n\n          {!searchPerformed && (\n            <div style={{ textAlign: 'center', padding: '60px 0' }}>\n              <UserCheck style={{ width: '48px', height: '48px', color: 'var(--divider)', margin: '0 auto 1rem' }} />\n              <h3 style={{fontSize: '20px', color: 'var(--text)'}}>Ready to View Your Assignments</h3>\n              <p style={{ color: 'var(--muted)', maxWidth: '40ch', margin: '0 auto' }}>\n                Enter your full name above to see all merchants assigned to you.\n              </p>\n            </div>\n          )}\n        </div>\n    </div>\n  );\n}\n","size_bytes":13065},"attached_assets/SearchFilters_1756418006529.jsx":{"content":"import React from \"react\";\nimport { Search, Filter } from \"lucide-react\";\n\nexport default function SearchFilters({ \n  searchText, \n  setSearchText, \n  assignmentFilter, \n  setAssignmentFilter,\n  categoryFilter,\n  setCategoryFilter,\n  categories,\n  subCategoryFilter,\n  setSubCategoryFilter,\n  subCategories\n}) {\n  return (\n    <div className=\"card\" style={{ marginBottom: 'var(--gutter)' }}>\n      <div style={{ position: 'relative', marginBottom: '1rem' }}>\n        <Search style={{ \n          position: 'absolute', \n          left: '14px', \n          top: '50%', \n          transform: 'translateY(-50%)', \n          color: 'var(--muted)', \n          width: '18px', \n          height: '18px' \n        }} />\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search merchants...\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          style={{ \n            paddingLeft: '44px', \n            fontSize: 'clamp(14px, 4vw, 18px)',\n            padding: '14px 14px 14px 44px'\n          }}\n        />\n      </div>\n      \n      <div style={{ \n        display: 'grid', \n        gridTemplateColumns: 'repeat(auto-fit, minmax(min(180px, 100%), 1fr))', \n        gap: 'clamp(12px, 3vw, 16px)' \n      }}>\n        <div>\n          <label style={{ \n            fontSize: 'clamp(12px, 3vw, 14px)', \n            color: 'var(--muted)', \n            display: 'block', \n            marginBottom: '6px',\n            fontWeight: 500\n          }}>\n            Assignment Status\n          </label>\n          <select \n            className=\"input\" \n            value={assignmentFilter} \n            onChange={(e) => setAssignmentFilter(e.target.value)}\n            style={{ fontSize: 'clamp(12px, 3vw, 14px)' }}\n          >\n            <option value=\"all\">All Merchants</option>\n            <option value=\"unassigned\">Unassigned Only</option>\n            <option value=\"assigned\">Assigned Only</option>\n          </select>\n        </div>\n        \n        <div>\n          <label style={{ \n            fontSize: 'clamp(12px, 3vw, 14px)', \n            color: 'var(--muted)', \n            display: 'block', \n            marginBottom: '6px',\n            fontWeight: 500\n          }}>\n            Category\n          </label>\n          <select \n            className=\"input\" \n            value={categoryFilter} \n            onChange={(e) => {\n              setCategoryFilter(e.target.value);\n              setSubCategoryFilter(\"all\");\n            }}\n            style={{ fontSize: 'clamp(12px, 3vw, 14px)' }}\n          >\n            <option value=\"all\">All Categories</option>\n            {categories.map(category => (\n              <option key={category} value={category}>{category}</option>\n            ))}\n          </select>\n        </div>\n        \n        <div>\n          <label style={{ \n            fontSize: 'clamp(12px, 3vw, 14px)', \n            color: 'var(--muted)', \n            display: 'block', \n            marginBottom: '6px',\n            fontWeight: 500\n          }}>\n            Sub-Category\n          </label>\n          <select \n            className=\"input\"\n            value={subCategoryFilter} \n            onChange={(e) => setSubCategoryFilter(e.target.value)} \n            disabled={categoryFilter === 'all' && subCategories.length === 0}\n            style={{ fontSize: 'clamp(12px, 3vw, 14px)' }}\n          >\n            <option value=\"all\">All Sub-Categories</option>\n            {subCategories.map(subCategory => (\n              <option key={subCategory} value={subCategory}>{subCategory}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3652},"attached_assets/layout_1756417925063.js":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { Building2, Users, BarChart3, Sun, Moon, Menu } from \"lucide-react\";\n\nconst navigationItems = [\n  {\n    title: \"Merchant Selection\",\n    url: createPageUrl(\"MerchantSelection\"),\n    icon: Building2,\n  },\n  {\n    title: \"My Assignments\",\n    url: createPageUrl(\"MyAssignments\"),\n    icon: Users,\n  },\n];\n\nexport default function Layout({ children, currentPageName }) {\n  const location = useLocation();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const theme = localStorage.getItem(\"theme\");\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (theme === \"dark\" || (!theme && prefersDark)) {\n      document.documentElement.classList.add(\"dark\");\n      setIsDarkMode(true);\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      setIsDarkMode(false);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newMode = !isDarkMode;\n    if (newMode) {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.setItem(\"theme\", \"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.setItem(\"theme\", \"light\");\n    }\n    setIsDarkMode(newMode);\n  };\n\n  return (\n    <>\n      <style>\n        {`\n          /* Apple Design System - Updated for top navigation */\n          :root {\n            --font-sans: -apple-system, BlinkMacSystemFont, \"SF Pro Text\", \"SF Pro Display\",\n                        \"Helvetica Neue\", Helvetica, Arial, \"Segoe UI\", Roboto, system-ui, sans-serif;\n            --font-size-xs: 12px;\n            --font-size-sm: 14px;\n            --font-size-md: 16px;\n            --font-size-lg: 18px;\n            --font-size-xl: clamp(28px, 4vw, 40px);\n            --font-size-2xl: clamp(36px, 6vw, 56px);\n            --leading-tight: 1.12;\n            --leading-normal: 1.42;\n            --leading-relaxed: 1.6;\n            --bg: #fbfbfd;\n            --bg-elev: #ffffff;\n            --text: #1d1d1f;\n            --muted: #6e6e73;\n            --divider: rgba(0,0,0,0.08);\n            --tint: #0071e3;\n            --tint-press: #0062c3;\n            --success: #34c759;\n            --warning: #ff9f0a;\n            --danger:  #ff3b30;\n            --radius-sm: 8px;\n            --radius-md: 14px;\n            --radius-lg: 22px;\n            --shadow-xs: 0 1px 2px rgba(0,0,0,0.03);\n            --shadow-sm: 0 6px 18px rgba(0,0,0,0.06);\n            --shadow-md: 0 12px 28px rgba(0,0,0,0.08);\n            --max-w: 1200px;\n            --gutter: clamp(16px, 3.5vw, 32px);\n            --section-y: clamp(40px, 10vw, 120px);\n            --ease: cubic-bezier(.215,.61,.355,1);\n            --dur-fast: 160ms;\n            --dur: 260ms;\n            --dur-slow: 420ms;\n            --frost: rgba(255,255,255,0.7);\n            --frost-border: rgba(0,0,0,0.08);\n          }\n\n          /* Dark Mode */\n          .dark {\n            --bg: #000000;\n            --bg-elev: #111111;\n            --text: #f5f5f7;\n            --muted: #a1a1a6;\n            --divider: rgba(255,255,255,0.12);\n            --tint: #0a84ff;\n            --tint-press: #0063db;\n            --frost: rgba(30,30,32,0.7);\n            --frost-border: rgba(255,255,255,0.08);\n            --shadow-xs: 0 1px 2px rgba(0,0,0,0.4);\n            --shadow-sm: 0 10px 24px rgba(0,0,0,0.45);\n            --shadow-md: 0 20px 40px rgba(0,0,0,0.5);\n          }\n\n          html, body { \n            background: var(--bg); \n            color: var(--text); \n            font-family: var(--font-sans); \n            font-size: var(--font-size-md); \n            line-height: var(--leading-normal); \n            -webkit-font-smoothing: antialiased; \n            -moz-osx-font-smoothing: grayscale; \n            margin: 0;\n            padding: 0;\n          }\n          \n          a { \n            color: var(--tint); \n            text-decoration: none; \n            transition: color var(--dur) var(--ease); \n          }\n          a:hover { color: var(--tint-press); }\n          \n          p { margin: 0 0 1rem; color: var(--text); }\n          .small, small { font-size: var(--font-size-sm); color: var(--muted); }\n          \n          h1, h2, h3, h4 { \n            margin: 0 0 .5rem; \n            font-weight: 700; \n            letter-spacing: -0.02em; \n            line-height: var(--leading-tight);\n            color: var(--text);\n          }\n          h1 { font-size: var(--font-size-2xl); }\n          h2 { font-size: var(--font-size-xl); }\n          h3 { font-size: 22px; }\n          h4 { font-size: 18px; font-weight: 600; }\n          \n          .container { \n            width: min(100% - 2*var(--gutter), var(--max-w)); \n            margin-inline: auto; \n          }\n          \n          .grid { \n            display: grid; \n            gap: clamp(16px, 3vw, 24px); \n          }\n          .grid-3 { \n            grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr)); \n          }\n          \n          .btn { \n            appearance: none; \n            border: 1px solid var(--divider); \n            background: var(--bg-elev); \n            color: var(--text); \n            padding: 10px 18px; \n            border-radius: 999px; \n            font-weight: 600; \n            font-size: var(--font-size-sm); \n            transition: transform var(--dur-fast) var(--ease), box-shadow var(--dur) var(--ease), background var(--dur) var(--ease); \n            box-shadow: var(--shadow-xs); \n            cursor: pointer; \n            display: inline-flex; \n            align-items: center; \n            justify-content: center; \n            gap: 8px; \n            white-space: nowrap;\n          }\n          .btn:hover { transform: translateY(-1px); box-shadow: var(--shadow-sm); }\n          .btn:active { transform: translateY(0); }\n          .btn.primary { background: var(--tint); color: #fff; border-color: transparent; }\n          .btn.primary:hover { background: var(--tint-press); }\n          \n          .card { \n            background: var(--bg-elev); \n            border: 1px solid var(--divider); \n            border-radius: var(--radius-lg); \n            padding: clamp(16px, 4vw, 24px); \n            box-shadow: var(--shadow-xs); \n            transition: transform var(--dur) var(--ease), box-shadow var(--dur) var(--ease); \n            width: 100%;\n            box-sizing: border-box;\n          }\n          .card:hover { transform: translateY(-2px); box-shadow: var(--shadow-sm); }\n          \n          .input, select { \n            width: 100%; \n            background: var(--bg-elev); \n            color: var(--text); \n            border: 1px solid var(--divider); \n            padding: 12px 14px; \n            border-radius: 12px; \n            outline: none; \n            transition: border-color var(--dur) var(--ease), box-shadow var(--dur) var(--ease); \n            font-size: var(--font-size-md);\n            box-sizing: border-box;\n          }\n          .input:focus, select:focus { \n            border-color: rgba(0,113,227,0.35); \n            box-shadow: 0 0 0 4px rgba(0,113,227,0.12); \n          }\n          \n          .badge { \n            display: inline-flex; \n            align-items: center; \n            gap: 6px; \n            padding: 4px 12px; \n            font-size: var(--font-size-xs); \n            font-weight: 600; \n            border-radius: 999px; \n            border: 1px solid var(--divider); \n            background: var(--bg); \n            color: var(--muted); \n          }\n          .badge.available { \n            color: var(--tint); \n            border-color: rgba(0,113,227,0.25); \n            background-color: rgba(0,113,227,0.05); \n          }\n          .badge.assigned { \n            color: var(--success); \n            border-color: rgba(52,199,89,0.25); \n            background-color: rgba(52,199,89,0.05); \n          }\n\n          /* Top Navigation */\n          .top-nav {\n            position: sticky;\n            top: 0;\n            z-index: 50;\n            backdrop-filter: saturate(180%) blur(20px);\n            background: var(--frost);\n            border-bottom: 1px solid var(--frost-border);\n          }\n          \n          .top-nav-inner {\n            max-width: var(--max-w);\n            margin: 0 auto;\n            padding: 0 var(--gutter);\n            height: 60px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n          }\n          \n          .nav-brand {\n            font-size: 18px;\n            font-weight: 700;\n            letter-spacing: -0.02em;\n            color: var(--text);\n          }\n          \n          .nav-menu {\n            display: flex;\n            gap: 18px;\n            align-items: center;\n          }\n          \n          .nav-menu a {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            padding: 8px 12px;\n            border-radius: var(--radius-sm);\n            font-size: var(--font-size-sm);\n            font-weight: 500;\n            color: var(--text);\n            transition: background .2s ease, color .2s ease;\n          }\n          \n          .nav-menu a:hover {\n            background: var(--bg);\n          }\n          \n          .nav-menu a.active {\n            background: var(--tint);\n            color: white;\n          }\n          \n          .nav-menu a.active:hover {\n            background: var(--tint-press);\n          }\n          \n          .theme-toggle {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            padding: 6px 12px;\n            border-radius: 999px;\n            background: var(--bg);\n            border: 1px solid var(--divider);\n            cursor: pointer;\n            transition: all var(--dur) var(--ease);\n          }\n          \n          .theme-toggle:hover {\n            background: var(--bg-elev);\n            box-shadow: var(--shadow-xs);\n          }\n          \n          .mobile-menu-btn {\n            display: none;\n            background: transparent;\n            border: none;\n            color: var(--text);\n            cursor: pointer;\n          }\n          \n          .mobile-menu {\n            display: none;\n            position: absolute;\n            top: 100%;\n            left: 0;\n            right: 0;\n            background: var(--bg-elev);\n            border-bottom: 1px solid var(--divider);\n            padding: var(--gutter);\n          }\n          \n          .mobile-menu.open {\n            display: block;\n          }\n          \n          .mobile-menu a {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            padding: 12px 0;\n            border-bottom: 1px solid var(--divider);\n            font-size: var(--font-size-md);\n            font-weight: 500;\n            color: var(--text);\n          }\n          \n          .mobile-menu a:last-child {\n            border-bottom: none;\n          }\n          \n          .mobile-menu a.active {\n            color: var(--tint);\n          }\n          \n          .main-content {\n            padding: var(--gutter);\n            max-width: var(--max-w);\n            margin: 0 auto;\n            width: 100%;\n            box-sizing: border-box;\n          }\n          \n          @media (max-width: 768px) {\n            .nav-menu {\n              display: none;\n            }\n            \n            .mobile-menu-btn {\n              display: block;\n            }\n            \n            .grid-3 {\n              grid-template-columns: 1fr;\n            }\n            \n            .card {\n              padding: 16px;\n            }\n            \n            h1 {\n              font-size: clamp(24px, 8vw, 36px);\n            }\n            \n            h2 {\n              font-size: clamp(20px, 6vw, 28px);\n            }\n          }\n        `}\n      </style>\n      \n      <div style={{ minHeight: '100vh', background: 'var(--bg)' }}>\n        <nav className=\"top-nav\">\n          <div className=\"top-nav-inner\">\n            <div className=\"nav-brand\">Ridgewood Jamboree</div>\n            \n            <div className=\"nav-menu\">\n              {navigationItems.map((item) => (\n                <Link \n                  to={item.url} \n                  key={item.title}\n                  className={location.pathname === item.url ? 'active' : ''}\n                >\n                  <item.icon size={16} />\n                  <span>{item.title}</span>\n                </Link>\n              ))}\n              \n              <div className=\"theme-toggle\" onClick={toggleTheme}>\n                {isDarkMode ? <Moon size={16} /> : <Sun size={16} />}\n                <span style={{ fontSize: 'var(--font-size-xs)', fontWeight: 600 }}>\n                  {isDarkMode ? 'Dark' : 'Light'}\n                </span>\n              </div>\n            </div>\n            \n            <button \n              className=\"mobile-menu-btn\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            >\n              <Menu size={24} />\n            </button>\n          </div>\n          \n          <div className={`mobile-menu ${isMobileMenuOpen ? 'open' : ''}`}>\n            {navigationItems.map((item) => (\n              <Link \n                to={item.url} \n                key={item.title}\n                className={location.pathname === item.url ? 'active' : ''}\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <item.icon size={20} />\n                <span>{item.title}</span>\n              </Link>\n            ))}\n            \n            <div \n              style={{ \n                display: 'flex', \n                alignItems: 'center', \n                gap: '12px', \n                padding: '12px 0',\n                cursor: 'pointer' \n              }}\n              onClick={toggleTheme}\n            >\n              {isDarkMode ? <Moon size={20} /> : <Sun size={20} />}\n              <span>Switch to {isDarkMode ? 'Light' : 'Dark'} Mode</span>\n            </div>\n          </div>\n        </nav>\n        \n        <main className=\"main-content\">\n          {children}\n        </main>\n      </div>\n    </>\n  );\n}\n\n","size_bytes":14244},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\n// Import Google Sheets Service\nconst SHEET_ID = '1KCizb55EhOFAqmN-7SlBaUp0qHNJRZwFWhvG_ITno0w';\nconst API_KEY = 'AIzaSyBBJEfU6h_PQfVN4_H2eAo5spS0ZP6rsmc';\nconst MERCHANTS_RANGE = 'Sheet1!A:L';\nconst VOLUNTEERS_RANGE = 'Sheet1!L:L';\nconst APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycby43gvbpZK9-5jRyrV1z1XJ4KG_MudXk0ry1IM158WrBPcF4WAfJjJNvTwpFB8DR_wV/exec';\n\n// Cache for Google Sheets data\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_TTL = 30000; // 30 seconds\n\nasync function fetchFromGoogleSheets(range: string, useCache = true) {\n  const cacheKey = `sheets_${range}`;\n  const now = Date.now();\n\n  if (useCache && cache.has(cacheKey)) {\n    const cached = cache.get(cacheKey)!;\n    if (now - cached.timestamp < CACHE_TTL) {\n      return cached.data;\n    }\n  }\n\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`;\n  const response = await fetch(url);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(`Google Sheets API error: ${data.error?.message || 'Unknown error'}`);\n  }\n\n  cache.set(cacheKey, { data, timestamp: now });\n  return data;\n}\n\nfunction formatAddress(street: string, streetMaster: string, number: string, town: string, state: string): string {\n  const parts: string[] = [];\n\n  // Use street number if available\n  if (number && number.trim()) {\n    parts.push(number.trim());\n  }\n\n  // Use the main street name (prefer streetMaster if available, otherwise use street)\n  const streetName = (streetMaster && streetMaster.trim()) || (street && street.trim());\n  if (streetName) {\n    parts.push(streetName);\n  }\n\n  // Add town and state\n  if (town && town.trim()) {\n    const townPart = town.trim();\n    if (state && state.trim()) {\n      parts.push(`${townPart}, ${state.trim()}`);\n    } else {\n      parts.push(townPart);\n    }\n  }\n\n  return parts.join(' ');\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Merchants endpoints\n  app.get(\"/api/merchants\", async (req, res) => {\n    try {\n      const responseData = await fetchFromGoogleSheets(MERCHANTS_RANGE);\n\n      if (!responseData.values || responseData.values.length === 0) {\n        return res.json([]);\n      }\n\n      const merchants = responseData.values.slice(1).map((row: string[], index: number) => ({\n        id: `merchant_${index}`,\n        business_name: row[0] || '',\n        category: row[7] || '', // Column H - Index Category\n        sub_category: '', // Will be set dynamically in UI\n        address: formatAddress(row[1] || '', row[2] || '', row[3] || '', row[4] || '', row[5] || ''), // Column B-F for address\n        contact_person: row[10] || '', // Column K - Advertiser Contact\n        phone: row[8] || '', // Column I - Merchant Phone\n        email: row[9] || '', // Column J - Advertiser E-mail\n        status: 'active',\n        assigned_to: row[11] || null, // Column L - Cast Who Sold Ad\n      })).filter((m: any) => m.business_name.trim() !== '' && m.category.trim() !== '');\n\n      res.json(merchants);\n    } catch (error) {\n      console.error('Error fetching merchants:', error);\n      res.status(500).json({ message: \"Failed to fetch merchants from Google Sheets\" });\n    }\n  });\n\n  // Volunteers endpoints\n  app.get(\"/api/volunteers\", async (req, res) => {\n    try {\n      const responseData = await fetchFromGoogleSheets(VOLUNTEERS_RANGE);\n\n      if (!responseData.values || responseData.values.length === 0) {\n        return res.json([]);\n      }\n\n      const volunteerNames = Array.from(new Set(responseData.values\n        .slice(1)\n        .map((row: string[]) => row[0])\n        .filter((name: string) => name && name.trim() !== '')));\n\n      const volunteers = volunteerNames.map((name: string, index: number) => ({\n        id: `volunteer_${index}`,\n        full_name: name,\n        email: `${name.toLowerCase().replace(/\\s+/g, '.')}@email.com`,\n        phone: `(201) 555-${String(index + 1000).padStart(4, '0')}`,\n        role: \"volunteer\",\n        active: true\n      }));\n\n      res.json(volunteers);\n    } catch (error) {\n      console.error('Error fetching volunteers:', error);\n      res.status(500).json({ message: \"Failed to fetch volunteers from Google Sheets\" });\n    }\n  });\n\n  // Assignment endpoints\n  app.post(\"/api/assignments\", async (req, res) => {\n    try {\n      const { merchantName, volunteerName } = req.body;\n\n      if (!merchantName || !volunteerName) {\n        return res.status(400).json({ message: \"Merchant name and volunteer name are required\" });\n      }\n\n      // Check current assignments for the volunteer\n      const responseData = await fetchFromGoogleSheets(MERCHANTS_RANGE, false);\n      if (responseData.values) {\n        const currentAssignments = responseData.values.slice(1)\n          .filter((row: string[]) => row[11] === volunteerName).length;\n\n        if (currentAssignments >= 3) {\n          return res.status(400).json({ message: \"Volunteer already has maximum of 3 assignments\" });\n        }\n      }\n\n      // Call the Apps Script endpoint to update the sheet\n      const response = await fetch(APPS_SCRIPT_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ merchantName, volunteerName })\n      });\n\n      const data = await response.json();\n\n      if (data.status === \"success\") {\n        // Clear cache to force refresh\n        cache.clear();\n        res.json({ success: true, message: data.message });\n      } else {\n        res.status(400).json({ message: data.message || \"Assignment failed\" });\n      }\n    } catch (error) {\n      console.error('Assignment error:', error);\n      res.status(500).json({ message: \"Failed to assign merchant\" });\n    }\n  });\n\n  app.get(\"/api/assignments/:volunteerName\", async (req, res) => {\n    try {\n      const volunteerName = req.params.volunteerName;\n      const responseData = await fetchFromGoogleSheets(MERCHANTS_RANGE);\n\n      if (!responseData.values || responseData.values.length === 0) {\n        return res.json([]);\n      }\n\n      const assignments = responseData.values.slice(1)\n        .filter((row: string[]) => row[11] === volunteerName)\n        .map((row: string[], index: number) => ({\n          id: `merchant_${index}`,\n          business_name: row[0] || '',\n          category: row[3] || '',\n          sub_category: row[2] || '',\n          address: row[3] || '',\n          contact_person: row[4] || '',\n          phone: row[5] || '',\n          email: row[6] || '',\n          status: row[7] || 'active',\n          assigned_to: row[11] || null,\n        }));\n\n      res.json(assignments);\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":6950},"server/storage.ts":{"content":"import { type Merchant, type InsertMerchant, type Volunteer, type InsertVolunteer } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Merchants\n  getMerchants(): Promise<Merchant[]>;\n  getMerchant(id: string): Promise<Merchant | undefined>;\n  createMerchant(merchant: InsertMerchant): Promise<Merchant>;\n  updateMerchant(id: string, merchant: Partial<Merchant>): Promise<Merchant | undefined>;\n  \n  // Volunteers\n  getVolunteers(): Promise<Volunteer[]>;\n  getVolunteer(id: string): Promise<Volunteer | undefined>;\n  createVolunteer(volunteer: InsertVolunteer): Promise<Volunteer>;\n  \n  // Assignment operations\n  assignMerchantToVolunteer(merchantId: string, volunteerName: string): Promise<Merchant | undefined>;\n  getAssignmentsByVolunteer(volunteerName: string): Promise<Merchant[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private merchants: Map<string, Merchant>;\n  private volunteers: Map<string, Volunteer>;\n\n  constructor() {\n    this.merchants = new Map();\n    this.volunteers = new Map();\n    this.seedData();\n  }\n\n  private seedData() {\n    // Sample merchants\n    const sampleMerchants: InsertMerchant[] = [\n      {\n        business_name: \"Tony's Pizza Palace\",\n        category: \"restaurant\",\n        sub_category: \"pizza\",\n        address: \"123 Main Street, Ridgewood, NJ 07450\",\n        contact_person: \"Tony Rossi\",\n        phone: \"(201) 555-0123\",\n        email: \"tony@tonypizza.com\",\n        status: \"active\",\n        assigned_to: null,\n      },\n      {\n        business_name: \"Bella's Beauty Salon\",\n        category: \"health\",\n        sub_category: \"salon\",\n        address: \"456 Oak Avenue, Ridgewood, NJ 07450\",\n        contact_person: \"Isabella Martinez\",\n        phone: \"(201) 555-0456\",\n        email: \"bella@bellasalon.com\",\n        status: \"active\",\n        assigned_to: \"Sarah Johnson\",\n      },\n      {\n        business_name: \"Ridgewood Coffee Co.\",\n        category: \"restaurant\",\n        sub_category: \"coffee\",\n        address: \"789 Elm Street, Ridgewood, NJ 07450\",\n        contact_person: \"Jake Morrison\",\n        phone: \"(201) 555-0789\",\n        email: \"info@ridgewoodcoffee.com\",\n        status: \"active\",\n        assigned_to: null,\n      },\n      {\n        business_name: \"Elite Auto Repair\",\n        category: \"automotive\",\n        sub_category: \"car-repair\",\n        address: \"321 Pine Road, Ridgewood, NJ 07450\",\n        contact_person: \"Marcus Williams\",\n        phone: \"(201) 555-0321\",\n        email: \"marcus@eliteauto.com\",\n        status: \"active\",\n        assigned_to: \"Mike Chen\",\n      },\n      {\n        business_name: \"Fashion Forward Boutique\",\n        category: \"retail\",\n        sub_category: \"clothing\",\n        address: \"654 Cedar Lane, Ridgewood, NJ 07450\",\n        contact_person: \"Amanda Foster\",\n        phone: \"(201) 555-0654\",\n        email: \"amanda@fashionforward.com\",\n        status: \"active\",\n        assigned_to: null,\n      },\n      {\n        business_name: \"Green Garden Market\",\n        category: \"retail\",\n        sub_category: \"grocery\",\n        address: \"987 Maple Drive, Ridgewood, NJ 07450\",\n        contact_person: \"Tom Anderson\",\n        phone: \"(201) 555-0987\",\n        email: \"tom@greengardenmarket.com\",\n        status: \"active\",\n        assigned_to: \"Sarah Johnson\",\n      },\n    ];\n\n    // Sample volunteers\n    const sampleVolunteers: InsertVolunteer[] = [\n      {\n        full_name: \"Sarah Johnson\",\n        email: \"sarah.johnson@email.com\",\n        phone: \"(201) 555-1001\",\n        role: \"volunteer\",\n        active: true,\n      },\n      {\n        full_name: \"Mike Chen\",\n        email: \"mike.chen@email.com\",\n        phone: \"(201) 555-1002\",\n        role: \"volunteer\",\n        active: true,\n      },\n      {\n        full_name: \"Emily Rodriguez\",\n        email: \"emily.rodriguez@email.com\",\n        phone: \"(201) 555-1003\",\n        role: \"volunteer\",\n        active: true,\n      },\n      {\n        full_name: \"David Kim\",\n        email: \"david.kim@email.com\",\n        phone: \"(201) 555-1004\",\n        role: \"volunteer\",\n        active: true,\n      },\n      {\n        full_name: \"Lisa Thompson\",\n        email: \"lisa.thompson@email.com\",\n        phone: \"(201) 555-1005\",\n        role: \"volunteer\",\n        active: true,\n      },\n    ];\n\n    // Seed merchants\n    sampleMerchants.forEach(merchant => {\n      const id = randomUUID();\n      this.merchants.set(id, { ...merchant, id });\n    });\n\n    // Seed volunteers\n    sampleVolunteers.forEach(volunteer => {\n      const id = randomUUID();\n      this.volunteers.set(id, { ...volunteer, id });\n    });\n  }\n\n  async getMerchants(): Promise<Merchant[]> {\n    return Array.from(this.merchants.values());\n  }\n\n  async getMerchant(id: string): Promise<Merchant | undefined> {\n    return this.merchants.get(id);\n  }\n\n  async createMerchant(insertMerchant: InsertMerchant): Promise<Merchant> {\n    const id = randomUUID();\n    const merchant: Merchant = { ...insertMerchant, id };\n    this.merchants.set(id, merchant);\n    return merchant;\n  }\n\n  async updateMerchant(id: string, updates: Partial<Merchant>): Promise<Merchant | undefined> {\n    const merchant = this.merchants.get(id);\n    if (!merchant) return undefined;\n    \n    const updatedMerchant = { ...merchant, ...updates };\n    this.merchants.set(id, updatedMerchant);\n    return updatedMerchant;\n  }\n\n  async getVolunteers(): Promise<Volunteer[]> {\n    return Array.from(this.volunteers.values());\n  }\n\n  async getVolunteer(id: string): Promise<Volunteer | undefined> {\n    return this.volunteers.get(id);\n  }\n\n  async createVolunteer(insertVolunteer: InsertVolunteer): Promise<Volunteer> {\n    const id = randomUUID();\n    const volunteer: Volunteer = { ...insertVolunteer, id };\n    this.volunteers.set(id, volunteer);\n    return volunteer;\n  }\n\n  async assignMerchantToVolunteer(merchantId: string, volunteerName: string): Promise<Merchant | undefined> {\n    return this.updateMerchant(merchantId, { assigned_to: volunteerName });\n  }\n\n  async getAssignmentsByVolunteer(volunteerName: string): Promise<Merchant[]> {\n    const allMerchants = await this.getMerchants();\n    return allMerchants.filter(m => m.assigned_to === volunteerName);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6231},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const merchants = pgTable(\"merchants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  business_name: text(\"business_name\").notNull(),\n  category: text(\"category\").notNull(),\n  sub_category: text(\"sub_category\").notNull(),\n  address: text(\"address\").notNull(),\n  contact_person: text(\"contact_person\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"),\n  assigned_to: text(\"assigned_to\"),\n});\n\nexport const volunteers = pgTable(\"volunteers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  full_name: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").notNull().default(\"volunteer\"),\n  active: boolean(\"active\").notNull().default(true),\n});\n\nexport const insertMerchantSchema = createInsertSchema(merchants).omit({\n  id: true,\n});\n\nexport const insertVolunteerSchema = createInsertSchema(volunteers).omit({\n  id: true,\n});\n\nexport type InsertMerchant = z.infer<typeof insertMerchantSchema>;\nexport type Merchant = typeof merchants.$inferSelect;\nexport type InsertVolunteer = z.infer<typeof insertVolunteerSchema>;\nexport type Volunteer = typeof volunteers.$inferSelect;\n","size_bytes":1452},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/layout\";\nimport MerchantSelection from \"@/pages/merchant-selection\";\nimport MyAssignments from \"@/pages/my-assignments\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={MerchantSelection} />\n        <Route path=\"/merchant-selection\" component={MerchantSelection} />\n        <Route path=\"/my-assignments\" component={MyAssignments} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1010},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Apple Design System Variables */\n  --font-sans: -apple-system, BlinkMacSystemFont, \"SF Pro Text\", \"SF Pro Display\", \"Inter\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  \n  /* Light mode colors */\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47%, 11%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(212, 97%, 57%);\n  \n  /* Design tokens */\n  --radius: 12px;\n  --blur: 20px;\n  --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-sm: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  \n  /* Spacing and layout */\n  --max-w: 1200px;\n  --gutter: clamp(16px, 3.5vw, 32px);\n  --section-y: clamp(40px, 10vw, 120px);\n  \n  /* Animation */\n  --ease: cubic-bezier(0.4, 0, 0.2, 1);\n  --dur-fast: 160ms;\n  --dur: 260ms;\n  --dur-slow: 420ms;\n}\n\n.dark {\n  /* Dark mode colors */\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 80%, 55%);\n  --primary-foreground: hsl(222.2, 47%, 11%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 55.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(210, 80%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-weight: 700;\n    letter-spacing: -0.02em;\n    line-height: 1.2;\n  }\n}\n\n@layer components {\n  /* Glassmorphism Navigation */\n  .nav-glass {\n    backdrop-filter: saturate(180%) blur(var(--blur));\n    background: rgba(255, 255, 255, 0.8);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .dark .nav-glass {\n    background: rgba(17, 17, 17, 0.8);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Card Components */\n  .card-hover {\n    transition: all var(--dur) var(--ease);\n    width: 100%;\n    min-width: 0;\n    box-sizing: border-box;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Button Components */\n  .btn-apple {\n    @apply inline-flex items-center gap-2 px-5 py-2.5 rounded-xl font-semibold cursor-pointer transition-all duration-200 ease-out;\n    background: var(--primary);\n    color: var(--primary-foreground);\n    border: none;\n  }\n\n  .btn-apple:hover {\n    background: hsl(142, 76%, 30%);\n    transform: translateY(-1px);\n  }\n\n  .btn-apple:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n\n  .btn-secondary {\n    @apply inline-flex items-center gap-2 px-5 py-2.5 rounded-xl font-medium cursor-pointer transition-all duration-200 ease-out;\n    background: var(--secondary);\n    color: var(--secondary-foreground);\n    border: 1px solid var(--border);\n  }\n\n  .btn-secondary:hover {\n    background: var(--accent);\n  }\n\n  /* Input Components */\n  .input-apple {\n    @apply w-full px-4 py-3 rounded-xl transition-colors duration-200 text-sm;\n    background: var(--background);\n    color: var(--foreground);\n    border: 1px solid var(--border);\n  }\n\n  .input-apple:focus {\n    outline: none;\n    border-color: var(--primary);\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n\n  /* Badge Components */\n  .badge {\n    @apply inline-flex items-center gap-1 px-2 py-1 rounded-md text-xs font-medium;\n  }\n\n  .badge-available {\n    background: var(--success);\n    color: var(--success-foreground);\n    border: 1px solid var(--success);\n  }\n\n  .badge-assigned {\n    background: rgba(168, 85, 247, 0.1);\n    color: rgb(168, 85, 247);\n    border: 1px solid rgba(168, 85, 247, 0.2);\n  }\n\n  .badge-category {\n    background: var(--muted);\n    color: var(--muted-foreground);\n    border: 1px solid var(--border);\n  }\n\n  /* Modal Components */\n  .modal-backdrop {\n    backdrop-filter: blur(4px);\n    background: rgba(0, 0, 0, 0.4);\n  }\n\n  /* Suggestions Dropdown */\n  .suggestions {\n    @apply absolute top-full left-0 right-0 bg-card border border-border rounded-xl shadow-lg z-50 max-h-48 overflow-y-auto;\n  }\n\n  .suggestion-item {\n    @apply w-full px-4 py-3 border-none bg-transparent text-left cursor-pointer text-sm text-foreground border-b border-border transition-colors duration-150;\n  }\n\n  .suggestion-item:hover {\n    background: var(--muted);\n  }\n\n  .suggestion-item:last-child {\n    border-bottom: none;\n  }\n\n  /* Animation Classes */\n  .fade-in {\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n      transform: translateY(10px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n\n  .slide-up {\n    animation: slideUp 0.3s var(--ease);\n  }\n\n  @keyframes slideUp {\n    from { \n      opacity: 0; \n      transform: translateY(20px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n\n  /* Performance Stats */\n  .perf-stats {\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;\n    font-size: 12px;\n  }\n\n  /* Navigation Components */\n  .nav-link {\n    @apply inline-flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-accent transition-colors;\n  }\n\n  .nav-link.active {\n    background: var(--primary) !important;\n    color: var(--primary-foreground) !important;\n  }\n\n  .nav-link.active:hover {\n    background: hsl(142, 76%, 30%) !important;\n  }\n\n  .theme-toggle {\n    @apply inline-flex items-center gap-2 px-3 py-2 rounded-xl text-sm font-medium cursor-pointer transition-all duration-200;\n    background: var(--secondary);\n    color: var(--foreground);\n    border: 1px solid var(--border);\n  }\n\n  .theme-toggle:hover {\n    background: var(--accent);\n  }\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .desktop-nav {\n    display: none;\n  }\n  \n  .mobile-menu {\n    display: block;\n  }\n\n  .grid-responsive {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n  }\n\n  .card-hover {\n    margin: 0;\n    max-width: 100%;\n    width: 100%;\n  }\n\n  .container {\n    padding-left: 1rem !important;\n    padding-right: 1rem !important;\n    max-width: 100% !important;\n  }\n\n  /* Better button sizing on mobile */\n  .btn-apple, .btn-secondary {\n    padding: 0.75rem 1.5rem;\n    text-align: center;\n    justify-content: center;\n  }\n\n  /* Improved modal sizing on mobile */\n  .modal-backdrop > div {\n    margin: 1rem;\n    max-width: calc(100vw - 2rem);\n    max-height: calc(100vh - 2rem);\n    overflow-y: auto;\n  }\n}\n\n@media (min-width: 769px) {\n  .desktop-nav {\n    display: flex;\n  }\n  \n  .mobile-menu {\n    display: none;\n  }\n\n  .grid-responsive {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 1.5rem;\n  }\n}\n\n/* Scroll Lock */\n.scroll-locked {\n  overflow: hidden !important;\n  height: 100vh !important;\n}\n\n/* Address formatting */\n.address-text {\n  word-break: break-word;\n  hyphens: auto;\n}\n","size_bytes":8348},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/assignment-modal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { X, UserCheck, Check } from \"lucide-react\";\nimport { type Merchant, type Volunteer } from \"@shared/schema\";\nimport { getBusinessIcon } from \"@/lib/google-sheets-service\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ConfirmationModal from \"./confirmation-modal\";\n\ninterface AssignmentModalProps {\n  merchant: Merchant;\n  volunteers: Volunteer[];\n  onAssign: (merchantName: string, volunteerName: string) => Promise<void>;\n  onClose: () => void;\n  isLoading: boolean;\n  isOpen: boolean;\n}\n\nexport default function AssignmentModal({\n  merchant,\n  volunteers,\n  onAssign,\n  onClose,\n  isLoading,\n}: AssignmentModalProps) {\n  const [selectedVolunteer, setSelectedVolunteer] = useState(\"\");\n  const [showConfirmation, setShowConfirmation] = useState<boolean>(false);\n  const [isAssigning, setIsAssigning] = useState<boolean>(false);\n  const { toast } = useToast();\n\n  // Lock body scroll when modal is open\n  useEffect(() => {\n    document.body.classList.add('scroll-locked');\n    \n    return () => {\n      document.body.classList.remove('scroll-locked');\n    };\n  }, []);\n\n  const handleAssignClick = () => {\n    if (!selectedVolunteer) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a volunteer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowConfirmation(true);\n  };\n\n  const handleConfirmAssign = async () => {\n    setIsAssigning(true);\n    try {\n      await onAssign(merchant.business_name, selectedVolunteer);\n      toast({\n        title: \"Success\",\n        description: `Successfully assigned ${merchant.business_name} to ${selectedVolunteer}`,\n      });\n      setShowConfirmation(false);\n      onClose();\n    } catch (error: any) {\n      console.error('Assignment error:', error);\n      toast({\n        title: \"Assignment Failed\", \n        description: error.message || \"Failed to assign merchant. This might be due to OAuth permissions or network issues. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAssigning(false);\n    }\n  };\n\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 modal-backdrop flex items-center justify-center z-50\"\n      onClick={handleBackdropClick}\n      data-testid=\"assignment-modal\"\n    >\n      <div className=\"bg-card border border-border rounded-lg shadow-lg max-w-md w-full mx-4 slide-up\">\n        <div className=\"p-6 relative\">\n          {/* Close Button */}\n          <button \n            className=\"absolute top-4 right-4 w-8 h-8 bg-secondary rounded-full flex items-center justify-center hover:bg-accent transition-colors\" \n            onClick={onClose}\n            data-testid=\"button-close-modal\"\n          >\n            <X size={16} />\n          </button>\n\n          {/* Header */}\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <UserCheck size={20} className=\"text-primary-foreground\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground\">Assign Merchant</h2>\n              <p className=\"text-sm text-muted-foreground\">Select a volunteer for this merchant</p>\n            </div>\n          </div>\n\n          {/* Merchant Info */}\n          <div className=\"bg-muted rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-8 h-8 bg-background rounded-md flex items-center justify-center text-lg\">\n                {getBusinessIcon(merchant.category, merchant.sub_category)}\n              </div>\n              <h3 className=\"font-semibold text-foreground\" data-testid=\"text-modal-merchant-name\">\n                {merchant.business_name}\n              </h3>\n            </div>\n            <div className=\"flex gap-2 mb-2\">\n              <span className=\"badge badge-category\">{merchant.category}</span>\n              <span className=\"badge badge-category\">{merchant.sub_category}</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-modal-merchant-address\">\n              {merchant.address}\n            </p>\n          </div>\n\n          {/* Volunteer Selection */}\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n              Select Volunteer\n            </label>\n            <select \n              className=\"input-apple\" \n              value={selectedVolunteer}\n              onChange={(e) => setSelectedVolunteer(e.target.value)}\n              data-testid=\"select-volunteer\"\n            >\n              <option value=\"\" disabled>Choose a volunteer</option>\n              {volunteers.filter(v => v.active).map(volunteer => (\n                <option key={volunteer.id} value={volunteer.full_name}>\n                  {volunteer.full_name}\n                </option>\n              ))}\n            </select>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Note: Each volunteer can only have up to 3 merchants assigned.\n            </p>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-3 pt-4 border-t border-border\">\n            <button \n              className=\"btn-secondary flex-1\" \n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel-assignment\"\n            >\n              Cancel\n            </button>\n            <button \n              className=\"btn-apple flex-1\" \n              onClick={handleAssignClick}\n              disabled={isLoading || !selectedVolunteer}\n              data-testid=\"button-confirm-assignment\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  Assigning...\n                </>\n              ) : (\n                <>\n                  <Check size={16} />\n                  Assign Merchant\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Confirmation Modal */}\n      <ConfirmationModal\n        isOpen={showConfirmation}\n        onClose={() => setShowConfirmation(false)}\n        onConfirm={handleConfirmAssign}\n        merchant={merchant}\n        volunteerName={selectedVolunteer}\n        isLoading={isAssigning}\n      />\n    </div>\n  );\n}\n","size_bytes":6576},"client/src/components/confirmation-modal.tsx":{"content":"import React, { useEffect } from \"react\";\nimport { X, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { type Merchant } from \"@shared/schema\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  merchant: Merchant;\n  volunteerName: string;\n  isLoading?: boolean;\n}\n\nexport default function ConfirmationModal({ \n  isOpen, \n  onClose, \n  onConfirm, \n  merchant, \n  volunteerName, \n  isLoading = false \n}: ConfirmationModalProps) {\n  // Lock body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add('scroll-locked');\n    } else {\n      document.body.classList.remove('scroll-locked');\n    }\n    \n    return () => {\n      document.body.classList.remove('scroll-locked');\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 modal-backdrop flex items-center justify-center p-4\"\n      onClick={onClose}\n      data-testid=\"confirmation-modal-backdrop\"\n    >\n      <div \n        className=\"bg-card border border-border rounded-2xl p-6 w-full max-w-md slide-up\"\n        onClick={(e) => e.stopPropagation()}\n        data-testid=\"confirmation-modal\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <AlertTriangle size={20} className=\"text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Confirm Assignment\n            </h3>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground transition-colors\"\n            data-testid=\"button-close-confirmation\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"space-y-4 mb-6\">\n          <p className=\"text-muted-foreground\">\n            Are you sure you want to assign this merchant to{\" \"}\n            <span className=\"font-semibold text-foreground\">{volunteerName}</span>?\n          </p>\n          \n          <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle size={16} className=\"text-primary flex-shrink-0\" />\n              <div>\n                <p className=\"font-semibold text-foreground text-sm\" data-testid=\"text-merchant-name\">\n                  {merchant.business_name}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {merchant.category} {merchant.sub_category && `• ${merchant.sub_category}`}\n                </p>\n              </div>\n            </div>\n            {merchant.address && (\n              <p className=\"text-xs text-muted-foreground ml-6 address-text\" data-testid=\"text-merchant-address\">\n                {merchant.address}\n              </p>\n            )}\n          </div>\n\n          <div className=\"text-xs text-muted-foreground bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3\">\n            <p><strong>Note:</strong> This action will update the Google Sheet and cannot be easily undone. The merchant will be assigned to this volunteer.</p>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex gap-3 justify-end\">\n          <button\n            onClick={onClose}\n            disabled={isLoading}\n            className=\"px-4 py-2 rounded-xl text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-muted transition-colors disabled:opacity-50\"\n            data-testid=\"button-cancel-assignment\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"px-4 py-2 rounded-xl text-sm font-medium bg-primary text-primary-foreground hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2\"\n            data-testid=\"button-confirm-assignment\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-primary-foreground/30 border-t-primary-foreground rounded-full animate-spin\" />\n                Assigning...\n              </>\n            ) : (\n              'Confirm Assignment'\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4541},"client/src/components/layout.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Building2, UserCheck, Sun, Moon, Menu } from \"lucide-react\";\n\nconst navigationItems = [\n  {\n    title: \"Merchant Selection\",\n    url: \"/merchant-selection\",\n    icon: Building2,\n  },\n  {\n    title: \"My Assignments\", \n    url: \"/my-assignments\",\n    icon: UserCheck,\n  },\n];\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const theme = localStorage.getItem(\"theme\");\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (theme === \"dark\" || (!theme && prefersDark)) {\n      document.documentElement.classList.add(\"dark\");\n      setIsDarkMode(true);\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      setIsDarkMode(false);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newMode = !isDarkMode;\n    if (newMode) {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.setItem(\"theme\", \"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.setItem(\"theme\", \"light\");\n    }\n    setIsDarkMode(newMode);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"nav-glass sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-bold text-foreground\">Ridgewood Jamboree</h1>\n            </div>\n\n            {/* Desktop Navigation */}\n            <div className=\"desktop-nav items-center space-x-8\">\n              {navigationItems.map((item) => (\n                <Link \n                  to={item.url} \n                  key={item.title}\n                  className={`nav-link ${location === item.url ? 'active' : ''}`}\n                  data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                >\n                  <item.icon size={16} />\n                  <span>{item.title}</span>\n                </Link>\n              ))}\n              \n              <button \n                className=\"theme-toggle\" \n                onClick={toggleTheme}\n                data-testid=\"button-theme-toggle\"\n              >\n                {isDarkMode ? <Moon size={16} /> : <Sun size={16} />}\n                <span className=\"text-xs font-semibold\">\n                  {isDarkMode ? 'Dark' : 'Light'}\n                </span>\n              </button>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <button \n              className=\"mobile-menu md:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu size={24} />\n            </button>\n          </div>\n\n          {/* Mobile Menu */}\n          {isMobileMenuOpen && (\n            <div className=\"md:hidden pb-4\">\n              <div className=\"space-y-2\">\n                {navigationItems.map((item) => (\n                  <Link \n                    to={item.url} \n                    key={item.title}\n                    className={`nav-link block ${location === item.url ? 'active' : ''}`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid={`mobile-nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <item.icon size={20} />\n                    <span>{item.title}</span>\n                  </Link>\n                ))}\n                \n                <button \n                  className=\"theme-toggle w-full justify-start\"\n                  onClick={toggleTheme}\n                  data-testid=\"button-mobile-theme-toggle\"\n                >\n                  {isDarkMode ? <Moon size={20} /> : <Sun size={20} />}\n                  <span>Switch to {isDarkMode ? 'Light' : 'Dark'} Mode</span>\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":4470},"client/src/components/merchant-card.tsx":{"content":"import React from \"react\";\nimport { MapPin, Phone, Mail, CheckCircle, User, UserPlus } from \"lucide-react\";\nimport { type Merchant } from \"@shared/schema\";\nimport { getBusinessIcon } from \"@/lib/google-sheets-service\";\n\ninterface MerchantCardProps {\n  merchant: Merchant;\n  onAssign: () => void;\n}\n\nexport default function MerchantCard({ merchant, onAssign }: MerchantCardProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 card-hover\" data-testid={`merchant-card-${merchant.id}`}>\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-3 mb-4\">\n        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n          <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center text-xl flex-shrink-0\">\n            {getBusinessIcon(merchant.category, merchant.sub_category)}\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"font-semibold text-foreground text-lg mb-1\" style={{wordBreak: 'break-word'}} data-testid={`text-business-name-${merchant.id}`}>\n              {merchant.business_name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {merchant.category}{merchant.sub_category && ` • ${merchant.sub_category}`}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex-shrink-0\">\n          {merchant.assigned_to ? (\n            <span className=\"badge badge-assigned\" data-testid={`badge-assigned-${merchant.id}`}>\n              <CheckCircle size={12} />\n              Assigned\n            </span>\n          ) : (\n            <span className=\"badge badge-available\" data-testid={`badge-available-${merchant.id}`}>\n              <User size={12} />\n              Available\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Contact Details */}\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex items-start gap-2\">\n          <MapPin size={16} className=\"text-muted-foreground mt-0.5 flex-shrink-0\" />\n          <span className=\"text-sm text-muted-foreground address-text\" data-testid={`text-address-${merchant.id}`}>\n            {merchant.address || 'No address provided'}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Phone size={16} className=\"text-muted-foreground flex-shrink-0\" />\n          {merchant.phone ? (\n            <a \n              href={`tel:${merchant.phone}`} \n              className=\"text-sm text-primary hover:underline\" \n              data-testid={`link-phone-${merchant.id}`}\n            >\n              {merchant.phone}\n            </a>\n          ) : (\n            <span className=\"text-sm text-muted-foreground\">No phone</span>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Mail size={16} className=\"text-muted-foreground flex-shrink-0\" />\n          {merchant.email ? (\n            <a \n              href={`mailto:${merchant.email}`} \n              className=\"text-sm text-primary hover:underline truncate\"\n              data-testid={`link-email-${merchant.id}`}\n            >\n              {merchant.email}\n            </a>\n          ) : (\n            <span className=\"text-sm text-muted-foreground\">No email</span>\n          )}\n        </div>\n      </div>\n\n      {/* Footer */}\n      {merchant.assigned_to ? (\n        <div className=\"pt-4 border-t border-border\">\n          <p className=\"text-sm\">\n            <span className=\"text-muted-foreground\">Assigned to: </span>\n            <span className=\"font-semibold text-foreground\" data-testid={`text-assigned-to-${merchant.id}`}>\n              {merchant.assigned_to}\n            </span>\n          </p>\n        </div>\n      ) : (\n        <div className=\"pt-4\">\n          <button \n            className=\"btn-apple w-full\" \n            onClick={onAssign}\n            data-testid={`button-assign-${merchant.id}`}\n          >\n            <UserPlus size={16} />\n            Select This Merchant\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4038},"client/src/components/search-filters.tsx":{"content":"import React from \"react\";\nimport { Search } from \"lucide-react\";\n\ninterface SearchFiltersProps {\n  searchText: string;\n  setSearchText: (text: string) => void;\n  assignmentFilter: string;\n  setAssignmentFilter: (filter: string) => void;\n  categoryFilter: string;\n  setCategoryFilter: (filter: string) => void;\n  categories: string[];\n}\n\nexport default function SearchFilters({\n  searchText,\n  setSearchText,\n  assignmentFilter,\n  setAssignmentFilter,\n  categoryFilter,\n  setCategoryFilter,\n  categories,\n}: SearchFiltersProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 mb-6\">\n      {/* Search Input */}\n      <div className=\"relative mb-6\">\n        <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n        <input\n          type=\"text\"\n          className=\"input-apple pl-12\"\n          placeholder=\"Search merchants...\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          data-testid=\"input-search-merchants\"\n        />\n      </div>\n      \n      {/* Filter Controls */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n            Assignment Status\n          </label>\n          <select \n            className=\"input-apple\" \n            value={assignmentFilter} \n            onChange={(e) => setAssignmentFilter(e.target.value)}\n            data-testid=\"select-assignment-filter\"\n          >\n            <option value=\"all\">All Merchants</option>\n            <option value=\"unassigned\">Unassigned Only</option>\n            <option value=\"assigned\">Assigned Only</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n            Category\n          </label>\n          <select \n            className=\"input-apple\" \n            value={categoryFilter} \n            onChange={(e) => setCategoryFilter(e.target.value)}\n            data-testid=\"select-category-filter\"\n          >\n            <option value=\"all\">All Categories</option>\n            {categories.map(category => (\n              <option key={category} value={category}>{category}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2367},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/google-sheets-service.ts":{"content":"import { type Merchant, type Volunteer } from \"@shared/schema\";\n\n// Google Sheets Service Configuration\nconst SHEET_ID = \"1KCizb55EhOFAqmN-7SlBaUp0qHNJRZwFWhvG_ITno0w\";\nconst API_KEY = \"AIzaSyBBJEfU6h_PQfVN4_H2eAo5spS0ZP6rsmc\";\nconst MERCHANTS_RANGE = \"Sheet1!A:L\"; // Merchant info in columns A to L\nconst VOLUNTEERS_RANGE = \"Sheet1!L:L\"; // People list is in column L\nconst APPS_SCRIPT_URL =\n  \"https://script.google.com/macros/s/AKfycby43gvbpZK9-5jRyrV1z1XJ4KG_MudXk0ry1IM158WrBPcF4WAfJjJNvTwpFB8DR_wV/exec\";\n\n// Cache implementation for better performance\nclass SimpleCache {\n  private cache = new Map<string, { data: any; timestamp: number }>();\n  private ttl = 30000; // 30 seconds TTL\n\n  set(key: string, data: any) {\n    this.cache.set(key, { data, timestamp: Date.now() });\n  }\n\n  get(key: string) {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n\n    if (Date.now() - cached.timestamp > this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.data;\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nconst cache = new SimpleCache();\n\n// Google Sheets Service Class\nexport class GoogleSheetsService {\n  private formatAddress(street: string, streetMaster: string, number: string, town: string, state: string): string {\n    const parts: string[] = [];\n    \n    // Use street number if available\n    if (number && number.trim()) {\n      parts.push(number.trim());\n    }\n    \n    // Use the main street name (prefer streetMaster if available, otherwise use street)\n    const streetName = (streetMaster && streetMaster.trim()) || (street && street.trim());\n    if (streetName) {\n      parts.push(streetName);\n    }\n    \n    // Add town and state\n    if (town && town.trim()) {\n      const townPart = town.trim();\n      if (state && state.trim()) {\n        parts.push(`${townPart}, ${state.trim()}`);\n      } else {\n        parts.push(townPart);\n      }\n    }\n    \n    return parts.join(' ');\n  }\n  async fetchMerchants(useCache = true): Promise<Merchant[]> {\n    const cacheKey = \"merchants\";\n    const now = Date.now();\n\n    if (useCache && cache.get(cacheKey)) {\n      return cache.get(cacheKey);\n    }\n\n    try {\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${MERCHANTS_RANGE}?key=${API_KEY}`;\n      console.log(\"Fetching merchants from Google Sheets:\", url);\n\n      const response = await fetch(url);\n      const responseData = await response.json();\n\n      console.log(\"Merchants response status:\", response.status);\n\n      if (!response.ok) {\n        throw new Error(\n          `Google Sheets API error: ${responseData.error?.message || \"Unknown error\"}`,\n        );\n      }\n\n      if (!responseData.values || responseData.values.length === 0) {\n        throw new Error(\n          \"No merchant data found in range A:L. Please check if the sheet contains data in these columns.\",\n        );\n      }\n\n      console.log(\"Merchant data found:\", responseData.values.length, \"rows\");\n      console.log(\"First row (headers):\", responseData.values[0]);\n\n      const merchants = responseData.values\n        .slice(1)\n        .map((row: string[], index: number): Merchant => {\n          return {\n            id: `merchant_${index}`,\n            business_name: row[0] || \"\", // Column A - Business Name\n            category: row[7] || \"\", // Column H - Index Category\n            sub_category: \"\", // Will be set dynamically in UI\n            address: this.formatAddress(row[1], row[2], row[3], row[4], row[5]), // Formatted address\n            contact_person: row[10] || \"\", // Column K - Advertiser Contact\n            phone: row[8] || \"\", // Column I - Merchant Phone\n            email: row[9] || \"\", // Column J - Advertiser E-mail\n            status: \"active\",\n            assigned_to: row[11] || null, // Column L - Cast Who Sold Ad\n          };\n        })\n        .filter((m: Merchant) => m.business_name.trim() !== \"\");\n\n      console.log(\"Processed merchants:\", merchants.length);\n\n      cache.set(cacheKey, merchants);\n      return merchants;\n    } catch (error) {\n      console.error(\"Error fetching merchants from Google Sheets:\", error);\n      throw error;\n    }\n  }\n\n  async fetchVolunteers(): Promise<Volunteer[]> {\n    try {\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${VOLUNTEERS_RANGE}?key=${API_KEY}`;\n      console.log(\"Fetching volunteers from Google Sheets:\", url);\n\n      const response = await fetch(url);\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(\n          `Google Sheets API error: ${responseData.error?.message || \"Unknown error\"}`,\n        );\n      }\n\n      if (!responseData.values || responseData.values.length === 0) {\n        throw new Error(\"No volunteer data found in column L.\");\n      }\n\n      // Extract unique, non-empty names from column L\n      const volunteerNames = Array.from(\n        new Set(\n          responseData.values\n            .slice(1) // Skip header row\n            .map((row: string[]) => row[0])\n            .filter((name: string) => name && name.trim() !== \"\"),\n        ),\n      );\n\n      return volunteerNames.map(\n        (name: string, index: number): Volunteer => ({\n          id: `volunteer_${index}`,\n          full_name: name,\n          email: `${name.toLowerCase().replace(/\\s+/g, \".\")}@email.com`, // Mock email\n          phone: `(201) 555-${String(index + 1000).padStart(4, \"0\")}`, // Mock phone\n          role: \"volunteer\",\n          active: true,\n        }),\n      );\n    } catch (error) {\n      console.error(\"Error fetching volunteers from Google Sheets:\", error);\n      // As a fallback, return an empty array to prevent crashes\n      return [];\n    }\n  }\n\n  async updateMerchantAssignment(\n    merchantName: string,\n    volunteerName: string,\n  ): Promise<boolean> {\n    try {\n      // Client-side check for 3-assignment limit to prevent unnecessary API calls\n      const merchants = await this.fetchMerchants(false);\n      const currentAssignments = merchants.filter(\n        (m) => m.assigned_to === volunteerName,\n      ).length;\n      if (currentAssignments >= 3) {\n        throw new Error(\n          `${volunteerName} already has 3 assignments. Maximum limit reached.`,\n        );\n      }\n\n      // Call the Apps Script endpoint\n      const response = await fetch(APPS_SCRIPT_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ merchantName, volunteerName }),\n      });\n\n      const data = await response.json();\n\n      if (data.status === \"success\") {\n        console.log(`✅ ${data.message}`);\n        // Clear cache to force UI refresh\n        cache.clear();\n        return true;\n      } else {\n        // Throw an error with the message from the Apps Script\n        throw new Error(\n          data.message || \"An unknown error occurred during assignment.\",\n        );\n      }\n    } catch (err) {\n      console.error(\"Assignment error:\", err);\n      // Re-throw the error so it can be caught by the UI\n      throw err;\n    }\n  }\n\n  async getAssignmentsByVolunteer(volunteerName: string): Promise<Merchant[]> {\n    const allMerchants = await this.fetchMerchants();\n    return allMerchants.filter((m) => m.assigned_to === volunteerName);\n  }\n}\n\n// Business icon mapping based on category and sub-category\nexport function getBusinessIcon(\n  category: string,\n  subCategory?: string,\n): string {\n  const iconMap: Record<string, Record<string, string> | string> = {\n    restaurant: {\n      pizza: \"🍕\",\n      coffee: \"☕\",\n      default: \"🍽️\",\n    },\n    retail: {\n      clothing: \"👔\",\n      grocery: \"🛒\",\n      default: \"🛍️\",\n    },\n    health: {\n      salon: \"✂️\",\n      default: \"🏥\",\n    },\n    automotive: {\n      \"car-repair\": \"🚗\",\n      default: \"🔧\",\n    },\n    services: \"🔧\",\n    default: \"🏢\",\n  };\n\n  const categoryIcons = iconMap[category.toLowerCase()];\n\n  if (typeof categoryIcons === \"string\") {\n    return categoryIcons;\n  }\n\n  if (categoryIcons && subCategory) {\n    return (\n      categoryIcons[subCategory.toLowerCase()] ||\n      categoryIcons.default ||\n      (iconMap.default as string)\n    );\n  }\n\n  return iconMap.default as string;\n}\n\n// Export singleton instance\nexport const googleSheetsService = new GoogleSheetsService();\n","size_bytes":8318},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/merchant-selection.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Building2, Loader, RefreshCw } from \"lucide-react\";\nimport { type Merchant, type Volunteer } from \"@shared/schema\";\nimport SearchFilters from \"@/components/search-filters\";\nimport MerchantCard from \"@/components/merchant-card\";\nimport AssignmentModal from \"@/components/assignment-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MerchantSelection() {\n  const queryClient = useQueryClient();\n  const [searchText, setSearchText] = useState(\"\");\n  const [assignmentFilter, setAssignmentFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  \n  const [selectedMerchant, setSelectedMerchant] = useState<Merchant | null>(null);\n  const [visibleCount, setVisibleCount] = useState(30);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Fetch merchants with auto-refresh\n  const { data: merchants = [], isLoading: merchantsLoading, refetch: refetchMerchants } = useQuery<Merchant[]>({\n    queryKey: [\"/api/merchants\"],\n    refetchInterval: 30000, // Auto-refresh every 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  // Fetch volunteers\n  const { data: volunteers = [] } = useQuery<Volunteer[]>({\n    queryKey: [\"/api/volunteers\"],\n  });\n\n  // Assignment mutation\n  const assignMutation = useMutation({\n    mutationFn: async ({ merchantName, volunteerName }: { merchantName: string; volunteerName: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/assignments\", { merchantName, volunteerName });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Assignment failed');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/merchants\"] });\n      setSelectedMerchant(null);\n    },\n    onError: (error) => {\n      console.error('Assignment failed:', error);\n    },\n  });\n\n  // Filter merchants based on search criteria\n  const filteredMerchants = merchants.filter(merchant => {\n    // Search filter\n    const matchesSearch = !searchText || \n      merchant.business_name.toLowerCase().includes(searchText.toLowerCase()) ||\n      merchant.category.toLowerCase().includes(searchText.toLowerCase()) ||\n      merchant.sub_category.toLowerCase().includes(searchText.toLowerCase()) ||\n      merchant.address.toLowerCase().includes(searchText.toLowerCase());\n\n    // Assignment filter\n    const matchesAssignment = assignmentFilter === 'all' ||\n      (assignmentFilter === 'assigned' && merchant.assigned_to) ||\n      (assignmentFilter === 'unassigned' && !merchant.assigned_to);\n\n    // Category filter\n    const matchesCategory = categoryFilter === 'all' || merchant.category === categoryFilter;\n\n    return matchesSearch && matchesAssignment && matchesCategory;\n  });\n\n  // Get unique categories\n  const categories = Array.from(new Set(merchants.map(m => m.category).filter(cat => cat && cat.trim() !== '')));\n\n  const handleAssignMerchant = async (merchantName: string, volunteerName: string) => {\n    return new Promise((resolve, reject) => {\n      assignMutation.mutate({ merchantName, volunteerName }, {\n        onSuccess: (data) => {\n          resolve(data);\n        },\n        onError: (error) => {\n          reject(error);\n        }\n      });\n    });\n  };\n\n  // Manual refresh handler\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await refetchMerchants();\n    setTimeout(() => setIsRefreshing(false), 500);\n  };\n\n  const loadMoreMerchants = () => {\n    setVisibleCount(prev => prev + 30);\n  };\n\n  const visibleMerchants = filteredMerchants.slice(0, visibleCount);\n  const hasMore = filteredMerchants.length > visibleCount;\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n          <Building2 size={32} className=\"text-primary-foreground\" />\n        </div>\n        <h1 className=\"text-4xl font-bold text-foreground mb-2\">Merchant Sponsorship Portal</h1>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Browse and assign merchants for ad sponsorships in the Ridgewood Jamboree program.\n        </p>\n        \n        {/* Manual Refresh Button */}\n        <button \n          className=\"btn-secondary mt-4\" \n          onClick={handleRefresh}\n          disabled={isRefreshing}\n          data-testid=\"button-refresh\"\n        >\n          <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          <span>{isRefreshing ? 'Refreshing...' : 'Refresh Data'}</span>\n        </button>\n      </header>\n\n\n      {/* Search and Filters */}\n      <SearchFilters\n        searchText={searchText}\n        setSearchText={setSearchText}\n        assignmentFilter={assignmentFilter}\n        setAssignmentFilter={setAssignmentFilter}\n        categoryFilter={categoryFilter}\n        setCategoryFilter={setCategoryFilter}\n        categories={categories}\n      />\n\n      {/* Results Counter */}\n      <div className=\"text-center mb-6\">\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n          Showing <strong className=\"text-foreground\">{visibleMerchants.length}</strong> of <strong className=\"text-foreground\">{filteredMerchants.length}</strong> merchants\n          ({merchants.length} total)\n        </p>\n      </div>\n\n      {/* Loading State */}\n      {merchantsLoading && (\n        <div className=\"text-center py-16\">\n          <Loader className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n          <p className=\"text-muted-foreground\">Loading merchants...</p>\n        </div>\n      )}\n\n      {/* Merchant Grid */}\n      {!merchantsLoading && (\n        <div className=\"grid grid-responsive gap-6 mb-8\" data-testid=\"merchant-grid\">\n          {visibleMerchants.map((merchant, index) => (\n            <motion.div\n              key={merchant.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.05 }}\n            >\n              <MerchantCard \n                merchant={merchant} \n                onAssign={() => setSelectedMerchant(merchant)}\n              />\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!merchantsLoading && visibleMerchants.length === 0 && (\n        <div className=\"text-center py-16\" data-testid=\"empty-state\">\n          <Building2 className=\"w-12 h-12 text-muted-foreground/50 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-foreground mb-2\">No merchants found</h3>\n          <p className=\"text-muted-foreground\">Try adjusting your search filters to see more results.</p>\n        </div>\n      )}\n\n      {/* Load More Button */}\n      {hasMore && !merchantsLoading && (\n        <div className=\"text-center\">\n          <button \n            className=\"btn-apple\" \n            onClick={loadMoreMerchants}\n            data-testid=\"button-load-more\"\n          >\n            <Building2 size={16} />\n            Load More Merchants ({Math.max(0, filteredMerchants.length - visibleCount)} remaining)\n          </button>\n        </div>\n      )}\n\n      {/* Assignment Modal */}\n      {selectedMerchant && (\n        <AssignmentModal\n          merchant={selectedMerchant}\n          volunteers={volunteers}\n          onAssign={handleAssignMerchant}\n          onClose={() => setSelectedMerchant(null)}\n          isLoading={assignMutation.isPending}\n          isOpen={!!selectedMerchant}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7760},"client/src/pages/my-assignments.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { UserCheck } from \"lucide-react\";\nimport { type Merchant, type Volunteer } from \"@shared/schema\";\nimport MerchantCard from \"@/components/merchant-card\";\n\nexport default function MyAssignments() {\n  const [volunteerName, setVolunteerName] = useState(\"\");\n  const [searchPerformed, setSearchPerformed] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [filteredVolunteers, setFilteredVolunteers] = useState<Volunteer[]>([]);\n\n  // Fetch volunteers for autocomplete\n  const { data: volunteers = [] } = useQuery<Volunteer[]>({\n    queryKey: [\"/api/volunteers\"],\n  });\n\n  // Fetch assignments for the selected volunteer\n  const { data: assignments = [], isLoading, refetch } = useQuery<Merchant[]>({\n    queryKey: [\"/api/assignments\", volunteerName],\n    enabled: !!volunteerName.trim() && searchPerformed, // Auto-fetch when volunteer name is entered\n    refetchInterval: searchPerformed ? 30000 : false, // Auto-refresh every 30 seconds when search is performed\n  });\n\n  // Update filtered volunteers for autocomplete and auto-search\n  useEffect(() => {\n    if (volunteerName.trim() && volunteers.length > 0) {\n      const filtered = volunteers.filter(v => \n        v.full_name.toLowerCase().includes(volunteerName.toLowerCase())\n      ).slice(0, 5);\n      setFilteredVolunteers(filtered);\n      setShowSuggestions(filtered.length > 0 && volunteerName !== filtered[0]?.full_name);\n      \n      // Auto-search if exact match is found\n      const exactMatch = volunteers.find(v => \n        v.full_name.toLowerCase() === volunteerName.toLowerCase()\n      );\n      if (exactMatch && !searchPerformed) {\n        searchAssignments(exactMatch.full_name);\n      }\n    } else {\n      setFilteredVolunteers([]);\n      setShowSuggestions(false);\n    }\n  }, [volunteerName, volunteers, searchPerformed]);\n\n  const searchAssignments = async (nameToSearch?: string) => {\n    const searchName = nameToSearch || volunteerName.trim();\n    if (!searchName) return;\n    \n    setVolunteerName(searchName);\n    setSearchPerformed(true);\n    setShowSuggestions(false);\n    refetch();\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      searchAssignments();\n    } else if (e.key === 'ArrowDown' && filteredVolunteers.length > 0) {\n      e.preventDefault();\n      const firstSuggestion = document.querySelector('.suggestion-item') as HTMLElement;\n      if (firstSuggestion) firstSuggestion.focus();\n    }\n  };\n\n  const handleSuggestionClick = (name: string) => {\n    setVolunteerName(name);\n    setShowSuggestions(false);\n    searchAssignments(name);\n  };\n\n  const handleInputFocus = () => {\n    if (filteredVolunteers.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleInputBlur = () => {\n    setTimeout(() => setShowSuggestions(false), 200);\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n          <UserCheck size={32} className=\"text-primary-foreground\" />\n        </div>\n        <h1 className=\"text-4xl font-bold text-foreground mb-2\">My Assigned Merchants</h1>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          View all merchants assigned to you for ad sponsorship outreach.\n        </p>\n      </header>\n\n      {/* Search Form */}\n      <div className=\"bg-card border border-border rounded-lg p-6 mb-6 max-w-2xl mx-auto\">\n        <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n          Enter Your Full Name\n        </label>\n        <div className=\"flex gap-4 relative\">\n          <div className=\"flex-1 relative\">\n            <input\n              type=\"text\"\n              className=\"input-apple\"\n              placeholder=\"Type your full name...\"\n              value={volunteerName}\n              onChange={(e) => setVolunteerName(e.target.value)}\n              onKeyDown={handleKeyPress}\n              onFocus={handleInputFocus}\n              onBlur={handleInputBlur}\n              autoComplete=\"off\"\n              data-testid=\"input-volunteer-name\"\n            />\n            \n            {/* Suggestions Dropdown */}\n            {showSuggestions && (\n              <div className=\"suggestions\" data-testid=\"volunteer-suggestions\">\n                {filteredVolunteers.map((volunteer, index) => (\n                  <button\n                    key={volunteer.id}\n                    className=\"suggestion-item\"\n                    onClick={() => handleSuggestionClick(volunteer.full_name)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleSuggestionClick(volunteer.full_name);\n                      } else if (e.key === 'ArrowDown') {\n                        e.preventDefault();\n                        const next = e.currentTarget.nextElementSibling as HTMLElement;\n                        if (next) next.focus();\n                      } else if (e.key === 'ArrowUp') {\n                        e.preventDefault();\n                        const prev = e.currentTarget.previousElementSibling as HTMLElement;\n                        if (prev) prev.focus();\n                        else (document.querySelector('[data-testid=\"input-volunteer-name\"]') as HTMLElement)?.focus();\n                      }\n                    }}\n                    data-testid={`suggestion-${volunteer.id}`}\n                  >\n                    {volunteer.full_name}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <button \n            onClick={() => searchAssignments()}\n            disabled={!volunteerName.trim() || isLoading}\n            className=\"btn-apple flex-shrink-0\"\n            data-testid=\"button-search-assignments\"\n          >\n            {isLoading ? \"Searching...\" : \"Find\"}\n          </button>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2 mb-0\">\n          * Enter your name exactly as it was used during assignment. Maximum 3 assignments per volunteer.\n        </p>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && searchPerformed && (\n        <div className=\"text-center py-16\" data-testid=\"loading-assignments\">\n          <p className=\"text-muted-foreground\">Searching for your assignments...</p>\n        </div>\n      )}\n\n      {/* No Assignments Found */}\n      {!isLoading && searchPerformed && assignments.length === 0 && (\n        <div \n          className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-6 text-center max-w-2xl mx-auto\"\n          data-testid=\"no-assignments\"\n        >\n          <h4 className=\"text-destructive font-semibold mb-2\">No Assignments Found</h4>\n          <p className=\"text-muted-foreground\">No assignments found for \"{volunteerName}\". Please check the spelling and try again.</p>\n        </div>\n      )}\n\n      {/* Assignment Results */}\n      {!isLoading && assignments.length > 0 && (\n        <>\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-assignments-count\">\n              Your Assignments ({assignments.length}/3)\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Assigned to: <span className=\"font-semibold text-foreground\" data-testid=\"text-volunteer-name\">{volunteerName}</span>\n            </p>\n          </div>\n\n          <div className=\"grid grid-responsive gap-6\" data-testid=\"assignments-grid\">\n            {assignments.map((merchant, index) => (\n              <motion.div\n                key={merchant.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.05 }}\n              >\n                <MerchantCard \n                  merchant={merchant} \n                  onAssign={() => {}} // No assignment button for assigned merchants\n                />\n              </motion.div>\n            ))}\n          </div>\n        </>\n      )}\n\n      {/* Initial State */}\n      {!searchPerformed && (\n        <div className=\"text-center py-16\" data-testid=\"initial-state\">\n          <UserCheck className=\"w-12 h-12 text-muted-foreground/50 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-foreground mb-2\">Ready to View Your Assignments</h3>\n          <p className=\"text-muted-foreground max-w-lg mx-auto\">\n            Enter your full name above to see all merchants assigned to you.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8751},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/index.ts":{"content":"// Utility functions for the application\n\n/**\n * Create a page URL for routing\n */\nexport function createPageUrl(pageName: string): string {\n  return `/${pageName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '')}`;\n}\n\n/**\n * Format phone number for display\n */\nexport function formatPhoneNumber(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, '');\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\n  }\n  return phone;\n}\n\n/**\n * Truncate text to specified length\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n}\n\n/**\n * Debounce function for search inputs\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Check if a string is a valid email\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Generate a random ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\n/**\n * Capitalize first letter of each word\n */\nexport function titleCase(str: string): string {\n  return str.toLowerCase().split(' ').map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(' ');\n}\n\n/**\n * Get initials from a full name\n */\nexport function getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(part => part.charAt(0).toUpperCase())\n    .join('')\n    .slice(0, 2);\n}\n","size_bytes":1806},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}